"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var typedoc_parser_options_1 = require("./typedoc.parser.options");
var model_1 = require("../model");
var parsers_1 = require("./parsers");
var overview_parser_1 = require("./parsers/overview.parser");
var TypedocParser = /** @class */ (function () {
    function TypedocParser() {
        this.styles = new parsers_1.StylesParser();
        this.methods = new parsers_1.MethodsParser();
        this.props = new parsers_1.PropertiesParser();
        this.additionalExamples = new parsers_1.AdditionalExamplesParser();
        this.overview = new overview_parser_1.OverviewParser();
        this.classes = [];
    }
    TypedocParser.prototype.saveJSON = function (json) {
        this.json = json;
    };
    TypedocParser.prototype.parse = function (json, metadata) {
        this.saveJSON(json);
        return new model_1.Model(this.getClasses(this.json), metadata);
    };
    TypedocParser.prototype.getClasses = function (obj) {
        var _this = this;
        this.findAllClasses(obj);
        return this.classes
            .filter(function (item) { return _this.isClass(item) || _this.isInterface(item); })
            .filter(function (item) { return item[typedoc_parser_options_1.CO.comment]; })
            .map(function (item) {
            if (item[typedoc_parser_options_1.CO.decorators]) {
                if (_this.isComponent(item)) {
                    return _this.parseClass(item, 'component');
                }
                else if (_this.isService(item)) {
                    return _this.parseClass(item, 'service');
                }
                else if (_this.isDirective(item)) {
                    return _this.parseClass(item, 'directive');
                }
                else {
                    return _this.parseClass(item, 'class');
                }
            }
            else {
                if (_this.isInterface(item)) {
                    return _this.parseClass(item, 'interface');
                }
                else {
                    return _this.parseClass(item, 'class');
                }
            }
        });
    };
    TypedocParser.prototype.findAllClasses = function (obj) {
        var _this = this;
        if (obj && obj[typedoc_parser_options_1.CO.children]) {
            obj[typedoc_parser_options_1.CO.children].forEach(function (item) {
                if (_this.isClass(item) || _this.isInterface(item)) {
                    _this.classes.push(item);
                }
                else {
                    _this.findAllClasses(item);
                }
            });
        }
    };
    TypedocParser.prototype.parseClass = function (obj, kind) {
        return new model_1.Class({
            kind: kind,
            platform: null,
            examples: [],
            props: this.props.getProps(obj),
            methods: this.methods.getMethods(obj),
            name: obj[typedoc_parser_options_1.CO.name],
            description: '',
            shortDescription: '',
            styles: this.styles.getStyles(obj),
            liveExamples: this.additionalExamples.getAdditionalExamples(obj),
            overview: this.overview.getOverview(obj),
        });
    };
    TypedocParser.prototype.isClass = function (obj) {
        return obj[typedoc_parser_options_1.CO.primKind] === 'Class';
    };
    TypedocParser.prototype.isInterface = function (obj) {
        return obj[typedoc_parser_options_1.CO.primKind] === 'Interface';
    };
    TypedocParser.prototype.isComponent = function (obj) {
        return obj[typedoc_parser_options_1.CO.decorators][0][typedoc_parser_options_1.CO.name] === 'Component';
    };
    TypedocParser.prototype.isService = function (obj) {
        return obj[typedoc_parser_options_1.CO.decorators][0][typedoc_parser_options_1.CO.name] === 'Injectable';
    };
    TypedocParser.prototype.isDirective = function (obj) {
        return obj[typedoc_parser_options_1.CO.decorators][0][typedoc_parser_options_1.CO.name] === 'Directive';
    };
    TypedocParser.prototype.isNgModule = function (obj) {
        return obj[typedoc_parser_options_1.CO.decorators][0][typedoc_parser_options_1.CO.name] === 'NgModule';
    };
    return TypedocParser;
}());
exports.TypedocParser = TypedocParser;
