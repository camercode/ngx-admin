"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = require("../../model");
var typedoc_parser_options_1 = require("../typedoc.parser.options");
var _1 = require("./");
var MethodsParser = /** @class */ (function () {
    function MethodsParser() {
        this.params = new _1.ParamsParser();
        this.examples = new _1.ExamplesParser();
    }
    MethodsParser.prototype.getMethods = function (obj) {
        var _this = this;
        if (obj && obj[typedoc_parser_options_1.CO.children]) {
            return obj[typedoc_parser_options_1.CO.children]
                .filter(function (item) { return _this.isMethod(item) || _this.isConstructor(item); })
                .map(function (item) { return _this.parseMethod(item); });
        }
        else {
            return [];
        }
    };
    MethodsParser.prototype.parseMethod = function (obj) {
        return new model_1.Method({
            examples: [],
            params: this.params.getParams(obj),
            platform: null,
            name: obj[typedoc_parser_options_1.CO.name],
            type: this.getType(obj),
            isStatic: this.isStatic(obj),
            shortDescription: this.getShortDescription(obj),
            description: this.getDescription(obj),
            isDocsPrivate: this.getIsPrivate(obj),
            inherited: this.getIsInherited(obj),
        });
    };
    MethodsParser.prototype.getDescription = function (obj) {
        if (this.isHasDescription(obj)) {
            return obj[typedoc_parser_options_1.CO.signatures][0][typedoc_parser_options_1.CO.comment]['text'];
        }
        else {
            return '';
        }
    };
    MethodsParser.prototype.getIsPrivate = function (obj) {
        var tagsMatrix = obj[typedoc_parser_options_1.CO.signatures]
            .map(function (signature) {
            if (signature[typedoc_parser_options_1.CO.comment]) {
                if (signature[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.tags] && signature[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.tags].length !== 0) {
                    return signature[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.tags];
                }
                else {
                    return [];
                }
            }
            else {
                return [];
            }
        })
            .map(function (item) { return item.map(function (subItem) { return subItem[typedoc_parser_options_1.CO.tag] ? subItem[typedoc_parser_options_1.CO.tag] : ''; }); });
        return [].concat.apply([], tagsMatrix).some(function (item) { return item.includes(typedoc_parser_options_1.TagSearchItems.docsPrivate); });
    };
    MethodsParser.prototype.getIsInherited = function (obj) {
        return obj[typedoc_parser_options_1.CO.inheritedFrom] && obj[typedoc_parser_options_1.CO.inheritedFrom][typedoc_parser_options_1.CO.name];
    };
    MethodsParser.prototype.getShortDescription = function (obj) {
        if (this.isHasDescription(obj)) {
            return obj[typedoc_parser_options_1.CO.signatures][0][typedoc_parser_options_1.CO.comment]['shortText'];
        }
        else {
            return '';
        }
    };
    MethodsParser.prototype.getType = function (obj) {
        var returnedType = '';
        if (obj[typedoc_parser_options_1.CO.signatures] && obj[typedoc_parser_options_1.CO.signatures][0][typedoc_parser_options_1.CO.type]) {
            returnedType = this.determineType(obj[typedoc_parser_options_1.CO.signatures][0]);
        }
        return [returnedType];
    };
    MethodsParser.prototype.determineType = function (obj) {
        if (this.isIntrinsic(obj[typedoc_parser_options_1.CO.type])) {
            return this.parseIntrinsic(obj);
        }
        else if (this.isReflection(obj[typedoc_parser_options_1.CO.type])) {
            return this.parseReflection(obj);
        }
        else if (this.isReference(obj[typedoc_parser_options_1.CO.type])) {
            return this.parseReference(obj);
        }
        else if (this.isArray(obj[typedoc_parser_options_1.CO.type])) {
            return this.parseArray(obj);
        }
        else if (this.isTypeParameter(obj[typedoc_parser_options_1.CO.type])) {
            return this.parseTypeParameter(obj);
        }
    };
    MethodsParser.prototype.parseIntrinsic = function (obj) {
        return obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.name];
    };
    MethodsParser.prototype.parseReference = function (obj) {
        var returnedType = '';
        if (obj[typedoc_parser_options_1.CO.comment] && obj[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.returns]) {
            var checkString = obj[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.returns].replace(/[{}<>]+/g, '');
            if (checkString.length > 1) {
                returnedType = obj[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.returns];
            }
            else {
                returnedType = this.parseReferenceFromTypeArguments(obj);
            }
            return returnedType;
        }
        else {
            return this.parseReferenceFromTypeArguments(obj);
        }
    };
    MethodsParser.prototype.parseReferenceFromTypeArguments = function (obj) {
        var mainTypeName = obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.name];
        var helperType = '';
        if (obj[typedoc_parser_options_1.CO.type] && obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments] && obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments].length !== 0) {
            if (obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments][0][typedoc_parser_options_1.CO.declaration] &&
                obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments][0][typedoc_parser_options_1.CO.declaration][typedoc_parser_options_1.CO.children].length !== 0) {
                return mainTypeName + this.parseReferenceFromTypeArgumentsChildren(obj);
            }
            else if (obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments][0][typedoc_parser_options_1.CO.elementType]) {
                return mainTypeName + this.parseReferenceFromTypeArgumentsElementType(obj);
            }
            else {
                return mainTypeName + '<' + obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments][0][typedoc_parser_options_1.CO.name] + '>';
            }
        }
        else {
            return obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.name];
        }
    };
    MethodsParser.prototype.parseReferenceFromTypeArgumentsChildren = function (obj) {
        var _this = this;
        var helperType = '';
        var helperItemsArray = [];
        obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments][0][typedoc_parser_options_1.CO.declaration][typedoc_parser_options_1.CO.children].forEach(function (item) {
            helperType = _this.determineType(item);
            helperItemsArray.push(item[typedoc_parser_options_1.CO.name] + ': ' + helperType);
        });
        return '<{' + helperItemsArray.toString().replace(',', '; ') + '}>';
    };
    MethodsParser.prototype.parseReferenceFromTypeArgumentsElementType = function (obj) {
        var helperType = '';
        // todo find another kind of such preparation
        obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments][0].type = {
            type: obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments][0][typedoc_parser_options_1.CO.type],
            elementType: obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments][0][typedoc_parser_options_1.CO.elementType],
        };
        helperType = this.determineType(obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments][0]);
        return '<' + helperType + '>';
    };
    MethodsParser.prototype.parseReflection = function (obj) {
        if (obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.declaration][typedoc_parser_options_1.CO.children] && obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.declaration][typedoc_parser_options_1.CO.children].length !== 0) {
            return this.parseTypeFromReflectionChildren(obj);
        }
        else if (obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.declaration][typedoc_parser_options_1.CO.indexSignature] &&
            obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.declaration][typedoc_parser_options_1.CO.indexSignature].length !== 0) {
            return this.parseTypeFromReflectionIndexSignature(obj);
        }
        else {
            return this.parseTypeFromSignature(obj);
        }
    };
    MethodsParser.prototype.parseTypeFromReflectionChildren = function (obj) {
        var _this = this;
        var helperType = '';
        var helperItemsArray = [];
        obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.declaration][typedoc_parser_options_1.CO.children].forEach(function (item) {
            helperType = _this.determineType(item);
            helperItemsArray.push(item[typedoc_parser_options_1.CO.name] + ': ' + helperType);
        });
        return '{' + helperItemsArray.toString().replace(',', ', ') + '}';
    };
    MethodsParser.prototype.parseTypeFromReflectionIndexSignature = function (obj) {
        var indexSignatureObject = {};
        var indexSignatureObjectHelper = {};
        var item = obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.declaration][typedoc_parser_options_1.CO.indexSignature];
        item[typedoc_parser_options_1.CO.parameters].forEach(function (itemsItem) {
            indexSignatureObjectHelper[itemsItem[typedoc_parser_options_1.CO.name]] = itemsItem[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.name];
            indexSignatureObject['[' + JSON.stringify(indexSignatureObjectHelper)
                .replace(/[{}]+/g, '') + ']'] = item[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.name];
        });
        return JSON.stringify(indexSignatureObject)
            .replace(/[\\'"]+/g, '')
            .replace(/:/g, ': ');
    };
    MethodsParser.prototype.parseTypeFromSignature = function (obj) {
        var _this = this;
        var mainReturnedType = this.determineType(obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.declaration][typedoc_parser_options_1.CO.signatures][0]);
        var parameters = [];
        obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.declaration][typedoc_parser_options_1.CO.signatures][0][typedoc_parser_options_1.CO.parameters].forEach(function (item) {
            parameters.push(item[typedoc_parser_options_1.CO.name] + ': ' + _this.determineType(item));
        });
        var returnedTypePrepared = '';
        parameters.forEach(function (item) {
            returnedTypePrepared += item.toString() + ', ';
        });
        return ('(' + returnedTypePrepared + ') => ' + mainReturnedType).replace(/, \)/g, ')');
    };
    MethodsParser.prototype.parseTypeParameter = function (obj) {
        return obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.name];
    };
    MethodsParser.prototype.parseArray = function (obj) {
        return obj[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.elementType][typedoc_parser_options_1.CO.name] + '[]';
    };
    MethodsParser.prototype.isStatic = function (obj) {
        if (obj && obj[typedoc_parser_options_1.CO.flags] && obj[typedoc_parser_options_1.CO.flags][typedoc_parser_options_1.CO.isStatic]) {
            return obj[typedoc_parser_options_1.CO.flags][typedoc_parser_options_1.CO.isStatic];
        }
        else {
            return false;
        }
    };
    MethodsParser.prototype.isMethod = function (obj) {
        return obj[typedoc_parser_options_1.CO.primKind] === 'Method';
    };
    MethodsParser.prototype.isConstructor = function (obj) {
        return obj[typedoc_parser_options_1.CO.primKind] === 'Constructor';
    };
    MethodsParser.prototype.isHasDescription = function (obj) {
        return obj && obj[typedoc_parser_options_1.CO.signatures] && obj[typedoc_parser_options_1.CO.signatures][0][typedoc_parser_options_1.CO.comment];
    };
    MethodsParser.prototype.isIntrinsic = function (obj) {
        return obj[typedoc_parser_options_1.CO.type] === 'intrinsic';
    };
    MethodsParser.prototype.isReference = function (obj) {
        return obj[typedoc_parser_options_1.CO.type] === 'reference';
    };
    MethodsParser.prototype.isReflection = function (obj) {
        return obj[typedoc_parser_options_1.CO.type] === 'reflection';
    };
    MethodsParser.prototype.isArray = function (obj) {
        return obj[typedoc_parser_options_1.CO.type] === 'array';
    };
    MethodsParser.prototype.isTypeParameter = function (obj) {
        return obj[typedoc_parser_options_1.CO.type] === 'typeParameter';
    };
    return MethodsParser;
}());
exports.MethodsParser = MethodsParser;
