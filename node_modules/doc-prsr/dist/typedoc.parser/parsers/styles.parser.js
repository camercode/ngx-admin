"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = require("../../model");
var typedoc_parser_options_1 = require("../typedoc.parser.options");
var StylesParser = /** @class */ (function () {
    function StylesParser() {
    }
    StylesParser.prototype.getStyles = function (obj) {
        var _this = this;
        if (this.isHasTags(obj)) {
            return obj[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.tags]
                .filter(function (item) { return _this.isStyle(item); })
                .map(function (item) { return _this.parserStyle(item); });
        }
        else {
            return [];
        }
    };
    StylesParser.prototype.parserStyle = function (obj) {
        return new model_1.Style({
            shortDescription: this.getShortDescription(obj),
            styles: this.getStylesOfStyle(obj)
        });
    };
    StylesParser.prototype.getStylesOfStyle = function (obj) {
        if (obj && obj[typedoc_parser_options_1.CO.text]) {
            var arr = obj[typedoc_parser_options_1.CO.text].split('\n\n');
            var tempArr = [];
            var returnArr_1 = [];
            arr.splice(0, 1);
            tempArr = arr[0].split('\n');
            tempArr.forEach(function (item) {
                if (item) {
                    var _a = item.split(':'), key = _a[0], value = _a[1];
                    var styleObj = {};
                    styleObj['name'] = key ? key.trim() : '';
                    styleObj['description'] = value ? value.trim() : '';
                    returnArr_1.push(styleObj);
                }
            });
            return returnArr_1;
        }
        else {
            return [];
        }
    };
    StylesParser.prototype.getShortDescription = function (style) {
        if (style && style[typedoc_parser_options_1.CO.text]) {
            var workString = style[typedoc_parser_options_1.CO.text].replace(/\r\n\r\n/g, '/n/n').split(/\n\n/g);
            return workString[0];
        }
        else {
            return '';
        }
    };
    StylesParser.prototype.isHasTags = function (obj) {
        return obj && obj[typedoc_parser_options_1.CO.comment] && obj[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.tags] &&
            obj[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.tags].length;
    };
    StylesParser.prototype.isStyle = function (obj) {
        return obj[typedoc_parser_options_1.CO.tag] === 'styles';
    };
    return StylesParser;
}());
exports.StylesParser = StylesParser;
