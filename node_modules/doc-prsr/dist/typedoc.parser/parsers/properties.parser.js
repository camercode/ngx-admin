"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = require("../../model");
var typedoc_parser_options_1 = require("../typedoc.parser.options");
var PropertiesParser = /** @class */ (function () {
    function PropertiesParser() {
    }
    PropertiesParser.prototype.getProps = function (obj) {
        var _this = this;
        if (obj && obj[typedoc_parser_options_1.CO.children]) {
            return obj[typedoc_parser_options_1.CO.children]
                .filter(function (item) { return _this.isProperty(item) || _this.isAccessor(item); })
                .filter(function (item) { return item[typedoc_parser_options_1.CO.comment]; })
                .map(function (item) {
                if (item[typedoc_parser_options_1.CO.decorators]) {
                    if (_this.isInput(item)) {
                        return _this.parseProperty(item, 'input');
                    }
                    else if (_this.isOutput(item)) {
                        return _this.parseProperty(item, 'output');
                    }
                    else {
                        return _this.parseProperty(item, 'property');
                    }
                }
                else {
                    return _this.parseProperty(item, 'property');
                }
            });
        }
        else {
            return [];
        }
    };
    PropertiesParser.prototype.parseProperty = function (obj, kind) {
        return new model_1.Prop({
            kind: kind,
            platform: null,
            isStatic: this.isStatic(obj),
            type: this.getType(obj),
            required: null,
            name: this.getName(obj),
            description: this.getDescription(obj),
            shortDescription: this.getShortDescription(obj),
            isDocsPrivate: this.getIsPrivate(obj),
            inherited: this.getIsInherited(obj),
        });
    };
    PropertiesParser.prototype.getName = function (obj) {
        if (obj[typedoc_parser_options_1.CO.decorators]) {
            if (this.isInput(obj) && obj[typedoc_parser_options_1.CO.decorators][0][typedoc_parser_options_1.CO.arguments][typedoc_parser_options_1.CO.bindingPropertyName]) {
                return obj[typedoc_parser_options_1.CO.decorators][0][typedoc_parser_options_1.CO.arguments][typedoc_parser_options_1.CO.bindingPropertyName].replace(/'/g, '');
            }
            else {
                return obj[typedoc_parser_options_1.CO.name];
            }
        }
        else {
            return obj[typedoc_parser_options_1.CO.name];
        }
    };
    PropertiesParser.prototype.getType = function (prop) {
        if (prop[typedoc_parser_options_1.CO.type] && prop[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.type]) {
            var type = '';
            if (prop[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.type] === 'intrinsic') {
                type = this.getTypeIntrinsicProp(prop);
            }
            else if (prop[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.type] === 'array') {
                type = this.getTypeArrayProp(prop);
            }
            else if (prop[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.type] === 'reference') {
                type = this.getTypeReferenceProp(prop);
            }
            return type;
        }
        else {
            return this.getTypeOther(prop);
        }
    };
    PropertiesParser.prototype.getIsPrivate = function (obj) {
        return obj[typedoc_parser_options_1.CO.comment] && obj[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.tags] &&
            obj[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.tags].some(function (item) {
                return item.tag === typedoc_parser_options_1.TagSearchItems.docsPrivate;
            });
    };
    PropertiesParser.prototype.getIsInherited = function (obj) {
        return obj[typedoc_parser_options_1.CO.inheritedFrom] && obj[typedoc_parser_options_1.CO.inheritedFrom][typedoc_parser_options_1.CO.name];
    };
    PropertiesParser.prototype.getTypeIntrinsicProp = function (prop) {
        return prop[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.name];
    };
    PropertiesParser.prototype.getTypeArrayProp = function (prop) {
        return prop[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.elementType][typedoc_parser_options_1.CO.name] + '[]';
    };
    PropertiesParser.prototype.getTypeReferenceProp = function (prop) {
        if (prop[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments] && prop[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments].length !== 0) {
            return prop[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.name] + '<' + prop[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.typeArguments][0][typedoc_parser_options_1.CO.name] + '>';
        }
        else {
            return prop[typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.name];
        }
    };
    PropertiesParser.prototype.getTypeOther = function (prop) {
        if (prop[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.tags] && prop[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.tags].length !== 0) {
            return prop[typedoc_parser_options_1.CO.comment][typedoc_parser_options_1.CO.tags][0][typedoc_parser_options_1.CO.text].replace(/[\n{}]+/g, '');
        }
        else if (prop[typedoc_parser_options_1.CO.setSignature] && prop[typedoc_parser_options_1.CO.setSignature].length !== 0 &&
            prop[typedoc_parser_options_1.CO.setSignature][typedoc_parser_options_1.CO.parameters] && prop[typedoc_parser_options_1.CO.setSignature][typedoc_parser_options_1.CO.parameters].length !== 0) {
            return prop[typedoc_parser_options_1.CO.setSignature][typedoc_parser_options_1.CO.parameters][0][typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.name];
        }
        else if (prop[typedoc_parser_options_1.CO.getSignature] && prop[typedoc_parser_options_1.CO.getSignature].length !== 0) {
            return prop[typedoc_parser_options_1.CO.getSignature][typedoc_parser_options_1.CO.type][typedoc_parser_options_1.CO.name];
        }
    };
    PropertiesParser.prototype.getDescription = function (prop) {
        if (prop && prop[typedoc_parser_options_1.CO.comment]) {
            return prop[typedoc_parser_options_1.CO.comment]['text'];
        }
        else {
            return '';
        }
    };
    PropertiesParser.prototype.getShortDescription = function (prop) {
        if (prop && prop[typedoc_parser_options_1.CO.comment]) {
            return prop[typedoc_parser_options_1.CO.comment]['shortText'];
        }
        else {
            return '';
        }
    };
    PropertiesParser.prototype.isStatic = function (prop) {
        if (prop && prop[typedoc_parser_options_1.CO.flags] && prop[typedoc_parser_options_1.CO.flags][typedoc_parser_options_1.CO.isStatic]) {
            return prop[typedoc_parser_options_1.CO.flags][typedoc_parser_options_1.CO.isStatic];
        }
        else {
            return false;
        }
    };
    PropertiesParser.prototype.isProperty = function (obj) {
        return obj[typedoc_parser_options_1.CO.primKind] === 'Property';
    };
    PropertiesParser.prototype.isAccessor = function (obj) {
        return obj[typedoc_parser_options_1.CO.primKind] === 'Accessor';
    };
    PropertiesParser.prototype.isInput = function (prop) {
        return prop[typedoc_parser_options_1.CO.decorators][0][typedoc_parser_options_1.CO.name] === 'Input';
    };
    PropertiesParser.prototype.isOutput = function (prop) {
        return prop[typedoc_parser_options_1.CO.decorators][0][typedoc_parser_options_1.CO.name] === 'Output';
    };
    return PropertiesParser;
}());
exports.PropertiesParser = PropertiesParser;
