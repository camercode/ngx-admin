"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = require("../../model");
var common_1 = require("./common");
var doc_js_parser_options_1 = require("../doc-js.parser.options");
var PropertiesParser = /** @class */ (function () {
    function PropertiesParser() {
        this.common = new common_1.Common();
    }
    PropertiesParser.prototype.getProps = function (obj) {
        return this.getPropsFromProperties(obj).concat(this.getPropsFromInstance(obj).concat(this.getPropsFromStatic(obj)));
    };
    PropertiesParser.prototype.getPropsFromProperties = function (obj) {
        var _this = this;
        if (obj[doc_js_parser_options_1.CO.properties] && obj[doc_js_parser_options_1.CO.properties].length) {
            return obj[doc_js_parser_options_1.CO.properties].map(function (item) { return _this.parsePropFromProperties(item); });
        }
        else {
            return [];
        }
    };
    PropertiesParser.prototype.getPropsFromInstance = function (obj) {
        var _this = this;
        if (obj[doc_js_parser_options_1.CO.members] && obj[doc_js_parser_options_1.CO.members][doc_js_parser_options_1.CO.instance].length) {
            return obj[doc_js_parser_options_1.CO.members][doc_js_parser_options_1.CO.instance]
                .filter(function (item) { return item[doc_js_parser_options_1.CO.kind] === 'member'; })
                .map(function (item) { return _this.parsePropFromInstance(item); });
        }
        else {
            return [];
        }
    };
    PropertiesParser.prototype.getPropsFromStatic = function (obj) {
        var _this = this;
        if (obj[doc_js_parser_options_1.CO.members] && obj[doc_js_parser_options_1.CO.members][doc_js_parser_options_1.CO.static].length) {
            return obj[doc_js_parser_options_1.CO.members][doc_js_parser_options_1.CO.static]
                .filter(function (item) { return item[doc_js_parser_options_1.CO.kind] === 'member'; })
                .map(function (item) { return _this.parsePropFromStatic(item); });
        }
        else {
            return [];
        }
    };
    PropertiesParser.prototype.parsePropFromProperties = function (obj) {
        return new model_1.Prop({
            kind: 'prop',
            platform: null,
            isStatic: false,
            type: this.getTypeProperties(obj),
            required: null,
            name: this.common.getName(obj),
            shortDescription: this.isDescriptionsCoincide(obj) ? '' : this.getShortDescriptionProperties(obj),
            description: this.getDescriptionProperties(obj)
        });
    };
    PropertiesParser.prototype.parsePropFromInstance = function (obj) {
        return new model_1.Prop({
            kind: 'property',
            platform: null,
            isStatic: false,
            type: this.getTypeInstance(obj),
            required: null,
            name: this.common.getName(obj),
            shortDescription: this.getShortDescriptionInstance(obj),
            description: this.getDescriptionInstance(obj)
        });
    };
    PropertiesParser.prototype.parsePropFromStatic = function (obj) {
        return new model_1.Prop({
            kind: 'property',
            platform: null,
            isStatic: true,
            type: this.getTypeStatic(obj),
            required: null,
            name: this.common.getName(obj),
            shortDescription: this.getDescriptionStatic(obj),
            description: this.getDescriptionStatic(obj)
        });
    };
    PropertiesParser.prototype.getDescriptionInstance = function (prop) {
        var str = '';
        if (prop[doc_js_parser_options_1.CO.description] && prop[doc_js_parser_options_1.CO.description][doc_js_parser_options_1.CO.children].length > 1) {
            prop[doc_js_parser_options_1.CO.description][doc_js_parser_options_1.CO.children]
                .forEach(function (item) {
                item[doc_js_parser_options_1.CO.children]
                    .forEach(function (item) {
                    str += item[doc_js_parser_options_1.CO.value] + ' ';
                });
            });
            return str.split('}')[1].trim();
        }
        else {
            return '';
        }
    };
    PropertiesParser.prototype.getDescriptionProperties = function (prop) {
        var description = '';
        if (prop && prop[doc_js_parser_options_1.CO.description] && prop[doc_js_parser_options_1.CO.description][doc_js_parser_options_1.CO.children].length) {
            prop[doc_js_parser_options_1.CO.description][doc_js_parser_options_1.CO.children][0][doc_js_parser_options_1.CO.children]
                .forEach(function (item) {
                description += item[doc_js_parser_options_1.CO.value] + ' ';
            });
            return description;
        }
        else {
            return '';
        }
    };
    PropertiesParser.prototype.getDescriptionStatic = function (prop) {
        if (prop && prop[doc_js_parser_options_1.CO.tags]) {
            return prop[doc_js_parser_options_1.CO.tags][0][doc_js_parser_options_1.CO.description];
        }
        else {
            return '';
        }
    };
    PropertiesParser.prototype.getShortDescriptionProperties = function (prop) {
        if (prop && prop[doc_js_parser_options_1.CO.description]) {
            return prop[doc_js_parser_options_1.CO.description][doc_js_parser_options_1.CO.children][0][doc_js_parser_options_1.CO.children][0][doc_js_parser_options_1.CO.value].trim();
        }
        else {
            return '';
        }
    };
    PropertiesParser.prototype.getShortDescriptionInstance = function (prop) {
        if (prop && prop[doc_js_parser_options_1.CO.description]) {
            return prop[doc_js_parser_options_1.CO.description][doc_js_parser_options_1.CO.children][0][doc_js_parser_options_1.CO.children][0][doc_js_parser_options_1.CO.value]
                .split('}')[1].trim();
        }
        else {
            return '';
        }
    };
    PropertiesParser.prototype.getTypeProperties = function (prop) {
        if (prop && prop[doc_js_parser_options_1.CO.type]) {
            return (prop[doc_js_parser_options_1.CO.type][doc_js_parser_options_1.CO.name]);
        }
        else {
            return '';
        }
    };
    PropertiesParser.prototype.getTypeStatic = function (prop) {
        if (prop && prop[doc_js_parser_options_1.CO.properties]) {
            return prop[doc_js_parser_options_1.CO.properties][0][doc_js_parser_options_1.CO.type][doc_js_parser_options_1.CO.name];
        }
        else {
            return '';
        }
    };
    PropertiesParser.prototype.getTypeInstance = function (prop) {
        if (prop && prop[doc_js_parser_options_1.CO.description]) {
            return prop[doc_js_parser_options_1.CO.description][doc_js_parser_options_1.CO.children][0][doc_js_parser_options_1.CO.children][0][doc_js_parser_options_1.CO.value]
                .split(' ')[0].replace(/[{}]/g, '');
        }
        else {
            return '';
        }
    };
    PropertiesParser.prototype.isDescriptionsCoincide = function (obj) {
        return this.getShortDescriptionProperties(obj).trim() === this.getDescriptionProperties(obj).trim() ||
            this.getDescriptionProperties(obj).indexOf(this.getShortDescriptionProperties(obj)) != -1;
    };
    return PropertiesParser;
}());
exports.PropertiesParser = PropertiesParser;
