"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = require("../../model");
var doc_js_parser_options_1 = require("../doc-js.parser.options");
var _1 = require("./");
var common_1 = require("./common");
var MethodsParser = /** @class */ (function () {
    function MethodsParser() {
        this.examples = new _1.ExamplesParser();
        this.params = new _1.ParamsParser();
        this.common = new common_1.Common();
    }
    MethodsParser.prototype.getMethods = function (obj) {
        return this.getMethodsInstance(obj).concat(this.getMethodsStatic(obj));
    };
    MethodsParser.prototype.getMethodsInstance = function (obj) {
        var _this = this;
        if (this.isHasMethodsFrom(obj, 'instance')) {
            return obj[doc_js_parser_options_1.CO.members][doc_js_parser_options_1.CO.instance]
                .filter(function (item) { return _this.isFunction(item); })
                .map(function (item) { return _this.parseMethodFromInstance(item); });
        }
        else {
            return [];
        }
    };
    MethodsParser.prototype.getMethodsStatic = function (obj) {
        var _this = this;
        if (this.isHasMethodsFrom(obj, 'static')) {
            return obj[doc_js_parser_options_1.CO.members][doc_js_parser_options_1.CO.static]
                .filter(function (item) { return _this.isFunction(item); })
                .map(function (item) { return _this.parseMethodFromStatic(item); });
        }
        else {
            return [];
        }
    };
    MethodsParser.prototype.parseMethodFromInstance = function (obj) {
        return new model_1.Method({
            examples: this.examples.getExamples(obj),
            params: this.params.getParams(obj),
            platform: null,
            name: this.common.getName(obj),
            type: this.getType(obj),
            isStatic: false,
            shortDescription: this.common.getShortDescription(obj),
            description: this.common.getDescription(obj)
        });
    };
    MethodsParser.prototype.parseMethodFromStatic = function (obj) {
        return new model_1.Method({
            examples: this.examples.getExamples(obj),
            params: this.params.getParams(obj),
            platform: null,
            name: this.common.getName(obj),
            type: this.getType(obj),
            isStatic: true,
            shortDescription: this.common.getShortDescription(obj),
            description: this.common.getDescription(obj)
        });
    };
    MethodsParser.prototype.getType = function (obj) {
        var temp = [];
        if (obj[doc_js_parser_options_1.CO.methodType] && obj[doc_js_parser_options_1.CO.methodType].length) {
            obj[doc_js_parser_options_1.CO.methodType]
                .forEach(function (item) {
                temp.push(item[doc_js_parser_options_1.CO.type][doc_js_parser_options_1.CO.name]);
            });
            return temp;
        }
        else {
            return ['void'];
        }
    };
    MethodsParser.prototype.isFunction = function (obj) {
        return obj[doc_js_parser_options_1.CO.kind] === 'function';
    };
    MethodsParser.prototype.isHasMethodsFrom = function (obj, from) {
        return obj[doc_js_parser_options_1.CO.members] && obj[doc_js_parser_options_1.CO.members][from].length;
    };
    return MethodsParser;
}());
exports.MethodsParser = MethodsParser;
