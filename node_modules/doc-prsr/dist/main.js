"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var doc_js_parser_1 = require("./doc-js.parser/doc-js.parser");
var typedoc_parser_1 = require("./typedoc.parser/typedoc.parser");
var metadata_1 = require("./model/metadata/metadata");
var fs = require("fs");
var Path = require("path");
var program = require('commander');
program
    .version('0.0.1')
    .option('-g, --generator <value>', 'Generator:')
    .option('-f, --framework <value>', 'Framework:')
    .option('-i, --input <value>', 'Path to input file:')
    .option('-o, --output <value>', 'Path to output file: ');
program.on('--help', function () {
    console.log('You have to specify:');
    console.log('- generator (can be 2 types: typedoc, docjs)');
    console.log('- framework (can be 2 types: angular, react)');
    console.log('- pathes to input and output file (output file will be created)');
    console.log('For example: ');
    console.log('prsr -g typedoc -f angular -i input.json -o output.json');
});
program.parse(process.argv);
if (program['generator'] && program['framework'] && program['input'] && program['output']) {
    create(program['generator'], program['framework'], Path.resolve(program['input']), Path.resolve(program['output']));
}
else {
    console.log('You entered the wrong data! Use --help for getting information');
}
function create(generator, framework, inputPath, outputPath) {
    if (generator === 'docjs' && framework === 'react') {
        selectedParser('docjs', inputPath, outputPath);
    }
    else if (generator === 'typedoc' && framework === 'angular') {
        selectedParser('typedoc', inputPath, outputPath);
    }
    else {
        console.log('You entered the wrong data! Use --help for getting information');
    }
}
function selectedParser(parser, inputPath, outputPath) {
    var newdoc = {};
    fs.readFile(inputPath, function (err, data) {
        if (parser === 'docjs') {
            newdoc = new doc_js_parser_1.DocJsParser().parse(JSON.parse(data), new metadata_1.Metadata('javascript', 'docjs', 'react'));
        }
        else if (parser === 'typedoc') {
            newdoc = new typedoc_parser_1.TypedocParser().parse(JSON.parse(data), new metadata_1.Metadata('typescript', 'typedoc', 'angular'));
        }
        var outputObj = JSON.stringify(newdoc, null, 2);
        fs.writeFileSync(outputPath, outputObj);
    });
}
