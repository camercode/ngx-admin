{
  "metadata": {
    "language": "typescript",
    "generator": "typedoc",
    "framework": "angular"
  },
  "classes": [
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "tokenService",
              "type": "NbTokenService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "strategies",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbAuthService"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "strategyName",
              "type": "string",
              "required": null
            },
            {
              "name": "data",
              "type": "any",
              "required": null
            }
          ],
          "platform": null,
          "name": "authenticate",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "Authenticates with the selected strategy\nStores received token in the token storage",
          "description": "Example:\nauthenticate('email', {email: 'email@example.com', password: 'test'})\n"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "strategyName",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getStrategy",
          "type": [
            "NbAuthStrategy"
          ],
          "isStatic": false,
          "shortDescription": "Get registered strategy by name",
          "description": "Example:\ngetStrategy('email')\n"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getToken",
          "type": [
            "Observable<NbAuthToken>"
          ],
          "isStatic": false,
          "shortDescription": "Retrieves current authenticated token stored"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "isAuthenticated",
          "type": [
            "Observable<boolean>"
          ],
          "isStatic": false,
          "shortDescription": "Returns true if auth token is present in the token storage"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "isAuthenticatedOrRefresh",
          "type": [
            "Observable<boolean>"
          ],
          "isStatic": false,
          "shortDescription": "Returns true if valid auth token is present in the token storage.\nIf not, calls the strategy refreshToken, and returns isAuthenticated() if success, false otherwise"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "strategyName",
              "type": "string",
              "required": null
            }
          ],
          "platform": null,
          "name": "logout",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "Sign outs with the selected strategy\nRemoves token from the token storage",
          "description": "Example:\nlogout('email')\n"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onAuthenticationChange",
          "type": [
            "Observable<boolean>"
          ],
          "isStatic": false,
          "shortDescription": "Returns authentication status stream"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onTokenChange",
          "type": [
            "Observable<NbAuthToken>"
          ],
          "isStatic": false,
          "shortDescription": "Returns tokens stream"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "result",
              "type": "NbAuthResult",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "processResultToken",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "strategyName",
              "type": "string",
              "required": null
            },
            {
              "name": "data",
              "type": "any",
              "required": null
            }
          ],
          "platform": null,
          "name": "refreshToken",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "Sends a refresh token request\nStores received token in the token storage",
          "description": "Example:\nrefreshToken('email', {token: token})\n"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "strategyName",
              "type": "string",
              "required": null
            },
            {
              "name": "data",
              "type": "any",
              "required": null
            }
          ],
          "platform": null,
          "name": "register",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "Registers with the selected strategy\nStores received token in the token storage",
          "description": "Example:\nregister('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})\n"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "strategyName",
              "type": "string",
              "required": null
            },
            {
              "name": "data",
              "type": "any",
              "required": null
            }
          ],
          "platform": null,
          "name": "requestPassword",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "Sends forgot password request to the selected strategy",
          "description": "Example:\nrequestPassword('email', {email: 'email@example.com'})\n"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "strategyName",
              "type": "string",
              "required": null
            },
            {
              "name": "data",
              "type": "any",
              "required": null
            }
          ],
          "platform": null,
          "name": "resetPassword",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "Tries to reset password with the selected strategy",
          "description": "Example:\nresetPassword('email', {newPassword: 'test'})\n"
        }
      ],
      "name": "NbAuthService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Common authentication service.\nShould be used to as an interlayer between UI Components and Auth Strategy."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "token",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "ownerStrategyName",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "createdAt",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbAuthJWTToken"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getCreatedAt",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "Returns the token's creation date"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getName",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getOwnerStrategyName",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getPayload",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getTokenExpDate",
          "type": [
            "Date\n"
          ],
          "isStatic": false,
          "shortDescription": "Returns expiration date"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getValue",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Returns the token value"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "isValid",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Is data expired"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "parsePayload",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Returns payload object"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "prepareCreatedAt",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "for JWT token, the iat (issued at) field of the token payload contains the creation Date"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "toString",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Validate value and convert to string, if value is not valid return empty string"
        }
      ],
      "name": "NbAuthJWTToken",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Wrapper for JWT token with additional methods."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "ownerStrategyName",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "createdAt",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbAuthOAuth2JWTToken"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getAccessTokenPayload",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "Returns access token payload"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getCreatedAt",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "Returns the token's creation date"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getName",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getOwnerStrategyName",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getPayload",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getRefreshToken",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Returns the refresh token"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getTokenExpDate",
          "type": [
            "Date\n"
          ],
          "isStatic": false,
          "shortDescription": "Returns expiration date :\n- exp if set,\n- super.getExpDate() otherwise"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getType",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Returns the token type"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getValue",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Returns the token value"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "isValid",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Is token valid"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "parseAccessTokenPayload",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "parsePayload",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "prepareCreatedAt",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "for Oauth2 JWT token, the iat (issued at) field of the access_token payload"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "refreshToken",
              "type": "string",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "setRefreshToken",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": " put refreshToken in the token payload"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "toString",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Convert to string"
        }
      ],
      "name": "NbAuthOAuth2JWTToken",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Wrapper for OAuth2 token embedding JWT tokens"
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "ownerStrategyName",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "createdAt",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbAuthOAuth2Token"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getCreatedAt",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "Returns the token's creation date"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getName",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getOwnerStrategyName",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getPayload",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getRefreshToken",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Returns the refresh token"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getTokenExpDate",
          "type": [
            "Date\n"
          ],
          "isStatic": false,
          "shortDescription": "Returns expiration date"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getType",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Returns the token type"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getValue",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Returns the token value"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "isValid",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Is data expired"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "parsePayload",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Parses token payload"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "prepareCreatedAt",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "refreshToken",
              "type": "string",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "setRefreshToken",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": " put refreshToken in the token payload"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "toString",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Convert to string"
        }
      ],
      "name": "NbAuthOAuth2Token",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Wrapper for OAuth2 token whose access_token is a JWT Token"
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "token",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "ownerStrategyName",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "createdAt",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbAuthSimpleToken"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getCreatedAt",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "Returns the token's creation date"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getName",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getOwnerStrategyName",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getPayload",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getValue",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Returns the token value"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "isValid",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Is non empty and valid"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "parsePayload",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "prepareCreatedAt",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "toString",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Validate value and convert to string, if value is not valid return empty string"
        }
      ],
      "name": "NbAuthSimpleToken",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Wrapper for simple (text) token"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "fallbackClass",
              "type": "NbAuthTokenClass",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "tokenClasses",
              "type": "NbAuthTokenClass[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbAuthTokenParceler"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "name",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getClassByName",
          "type": [
            "NbAuthTokenClass"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "parseTokenPack",
          "type": [
            "NbTokenPack"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "unwrap",
          "type": [
            "NbAuthToken"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "token",
              "type": "NbAuthToken",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "wrap",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbAuthTokenParceler",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Creates a token parcel which could be stored/restored"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "parceler",
              "type": "NbAuthTokenParceler",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbTokenLocalStorage"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "clear",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Clears token from localStorage"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "get",
          "type": [
            "NbAuthToken"
          ],
          "isStatic": false,
          "shortDescription": "Returns token from localStorage"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "token",
              "type": "\n",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "set",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Sets token to localStorage"
        }
      ],
      "name": "NbTokenLocalStorage",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Service that uses browser localStorage as a storage."
        },
        {
          "type": "text",
          "content": "The token storage is provided into auth module the following way:\n```ts\n{ provide: NbTokenStorage, useClass: NbTokenLocalStorage },\n```\n\nIf you need to change the storage behaviour or provide your own - just extend your class from basic `NbTokenStorage`\nor `NbTokenLocalStorage` and provide in your `app.module`:\n```ts\n{ provide: NbTokenStorage, useClass: NbTokenCustomStorage },\n```\n\n"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "tokenStorage",
              "type": "NbTokenStorage",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbTokenService"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "clear",
          "type": [
            "Observable<null>"
          ],
          "isStatic": false,
          "shortDescription": "Removes the token and published token value"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "get",
          "type": [
            "Observable<NbAuthToken>"
          ],
          "isStatic": false,
          "shortDescription": "Returns observable of current token"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "publishStoredToken",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "token",
              "type": "NbAuthToken",
              "required": null
            }
          ],
          "platform": null,
          "name": "set",
          "type": [
            "Observable<null>"
          ],
          "isStatic": false,
          "shortDescription": "Sets a token into the storage. This method is used by the NbAuthService automatically."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "tokenChange",
          "type": [
            "Observable<NbAuthToken>"
          ],
          "isStatic": false,
          "shortDescription": "Publishes token when it changes."
        }
      ],
      "name": "NbTokenService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Service that allows you to manage authentication token - get, set, clear and also listen to token changes over time."
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "authenticate",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createDummyResult",
          "type": [
            "NbAuthResult"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createFailResponse",
          "type": [
            "HttpResponse<Object>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createSuccessResponse",
          "type": [
            "HttpResponse<Object>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "failWhenInvalidToken",
              "type": "boolean",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createToken",
          "type": [
            "T"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "action",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getActionEndpoint",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getName",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "key",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getOption",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "logout",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "refreshToken",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "register",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "requestPassword",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "resetPassword",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "options",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setOptions",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "options",
              "type": "NbDummyAuthStrategyOptions",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setup",
          "type": [
            null
          ],
          "isStatic": true,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbDummyAuthStrategy",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Dummy auth strategy. Could be useful for auth setup when backend is not available yet."
        },
        {
          "type": "text",
          "content": "Strategy settings.\n\n```ts\nexport class NbDummyAuthStrategyOptions extends NbAuthStrategyOptions {\n  name = 'dummy';\n  token = {\n    class: NbAuthSimpleToken,\n  };\n  delay? = 1000;\n  alwaysFail? = false;\n}\n```\n"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "http",
              "type": "HttpClient",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "route",
              "type": "ActivatedRoute",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "window",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbOAuth2AuthStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "params",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "addCredentialsToParams",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "authenticate",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "authorizeRedirect",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "buildAuthHeader",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "code",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "buildCodeRequestData",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "username",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "password",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "buildPasswordRequestData",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "buildRedirectUrl",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "token",
              "type": "NbAuthRefreshableToken",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "buildRefreshRequestData",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "params",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "cleanParams",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createFailResponse",
          "type": [
            "HttpResponse<Object>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "res",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "existingToken",
              "type": "NbAuthRefreshableToken",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "requireValidToken",
              "type": "boolean",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createRefreshedToken",
          "type": [
            "NbAuthToken"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createSuccessResponse",
          "type": [
            "HttpResponse<Object>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "failWhenInvalidToken",
              "type": "boolean",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createToken",
          "type": [
            "T"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "action",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getActionEndpoint",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getAuthorizationResult",
          "type": [
            "Observable<any>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getName",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "key",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getOption",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "res",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "handleResponseError",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "isRedirectResult",
          "type": [
            "Observable<boolean>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "logout",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "hash",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "parseHashAsQueryParams",
          "type": [
            "{[key: string]: string}"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "username",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "password",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "passwordToken",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "token",
              "type": "NbAuthRefreshableToken",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "refreshToken",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "register",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "requestPassword",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "code",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "requestToken",
          "type": [
            "Observable<undefined>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "resetPassword",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "options",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setOptions",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "options",
              "type": "NbOAuth2AuthStrategyOptions",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setup",
          "type": [
            null
          ],
          "isStatic": true,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbOAuth2AuthStrategy",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "OAuth2 authentication strategy."
        },
        {
          "type": "text",
          "content": "Strategy settings:\n\n```ts\nexport enum NbOAuth2ResponseType {\n  CODE = 'code',\n  TOKEN = 'token',\n}\n\nexport enum NbOAuth2GrantType {\n  AUTHORIZATION_CODE = 'authorization_code',\n  PASSWORD = 'password',\n  REFRESH_TOKEN = 'refresh_token',\n}\n\nexport class NbOAuth2AuthStrategyOptions {\n  name: string;\n  baseEndpoint?: string = '';\n  clientId: string = '';\n  clientSecret: string = '';\n  clientAuthMethod: string = NbOAuth2ClientAuthMethod.NONE;\n  redirect?: { success?: string; failure?: string } = {\n    success: '/',\n    failure: null,\n  };\n  defaultErrors?: any[] = ['Something went wrong, please try again.'];\n  defaultMessages?: any[] = ['You have been successfully authenticated.'];\n  authorize?: {\n    endpoint?: string;\n    redirectUri?: string;\n    responseType?: string;\n    requireValidToken: false,\n    scope?: string;\n    state?: string;\n    params?: { [key: string]: string };\n  } = {\n    endpoint: 'authorize',\n    responseType: NbOAuth2ResponseType.CODE,\n  };\n  token?: {\n    endpoint?: string;\n    grantType?: string;\n    requireValidToken: false,\n    redirectUri?: string;\n    scope?: string;\n    class: NbAuthTokenClass,\n  } = {\n    endpoint: 'token',\n    grantType: NbOAuth2GrantType.AUTHORIZATION_CODE,\n    class: NbAuthOAuth2Token,\n  };\n  refresh?: {\n    endpoint?: string;\n    grantType?: string;\n    scope?: string;\n    requireValidToken: false,\n  } = {\n    endpoint: 'token',\n    grantType: NbOAuth2GrantType.REFRESH_TOKEN,\n  };\n}\n```\n\n"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "http",
              "type": "HttpClient",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "route",
              "type": "ActivatedRoute",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbPasswordAuthStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "authenticate",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createFailResponse",
          "type": [
            "HttpResponse<Object>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createSuccessResponse",
          "type": [
            "HttpResponse<Object>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "failWhenInvalidToken",
              "type": "boolean",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createToken",
          "type": [
            "T"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "action",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getActionEndpoint",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getName",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "key",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getOption",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "res",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "module",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "handleResponseError",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "logout",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "refreshToken",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "register",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "requestPassword",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "resetPassword",
          "type": [
            "Observable<NbAuthResult>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "options",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setOptions",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "options",
              "type": "NbPasswordAuthStrategyOptions",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setup",
          "type": [
            null
          ],
          "isStatic": true,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbPasswordAuthStrategy",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "The most common authentication provider for email/password strategy."
        },
        {
          "type": "text",
          "content": "Strategy settings. Note, there is no need to copy over the whole object to change the settings you need.\nAlso, this.getOption call won't work outside of the default options declaration\n(which is inside of the `NbPasswordAuthStrategy` class), so you have to replace it with a custom helper function\nif you need it.\n\n```ts\nexport class NbPasswordAuthStrategyOptions extends NbAuthStrategyOptions {\n name: string;\n baseEndpoint? = '/api/auth/';\n login?: boolean | NbPasswordStrategyModule = {\n   alwaysFail: false,\n   endpoint: 'login',\n   method: 'post',\n   requireValidToken: false,\n   redirect: {\n     success: '/',\n     failure: null,\n   },\n   defaultErrors: ['Login/Email combination is not correct, please try again.'],\n   defaultMessages: ['You have been successfully logged in.'],\n };\n register?: boolean | NbPasswordStrategyModule = {\n   alwaysFail: false,\n   endpoint: 'register',\n   method: 'post',\n   requireValidToken: false,\n   redirect: {\n     success: '/',\n     failure: null,\n   },\n   defaultErrors: ['Something went wrong, please try again.'],\n   defaultMessages: ['You have been successfully registered.'],\n };\n requestPass?: boolean | NbPasswordStrategyModule = {\n   endpoint: 'request-pass',\n   method: 'post',\n   redirect: {\n     success: '/',\n     failure: null,\n   },\n   defaultErrors: ['Something went wrong, please try again.'],\n   defaultMessages: ['Reset password instructions have been sent to your email.'],\n };\n resetPass?: boolean | NbPasswordStrategyReset = {\n   endpoint: 'reset-pass',\n   method: 'put',\n   redirect: {\n     success: '/',\n     failure: null,\n   },\n   resetPasswordTokenKey: 'reset_password_token',\n   defaultErrors: ['Something went wrong, please try again.'],\n   defaultMessages: ['Your password has been successfully changed.'],\n };\n logout?: boolean | NbPasswordStrategyReset = {\n   alwaysFail: false,\n   endpoint: 'logout',\n   method: 'delete',\n   redirect: {\n     success: '/',\n     failure: null,\n   },\n   defaultErrors: ['Something went wrong, please try again.'],\n   defaultMessages: ['You have been successfully logged out.'],\n };\n refreshToken?: boolean | NbPasswordStrategyModule = {\n   endpoint: 'refresh-token',\n   method: 'post',\n   requireValidToken: false,\n   redirect: {\n     success: null,\n     failure: null,\n   },\n   defaultErrors: ['Something went wrong, please try again.'],\n   defaultMessages: ['Your token has been successfully refreshed.'],\n };\n token?: NbPasswordStrategyToken = {\n   class: NbAuthSimpleToken,\n   key: 'data.token',\n   getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n     res.body,\n     options.token.key,\n   ),\n };\n errors?: NbPasswordStrategyMessage = {\n   key: 'data.errors',\n   getter: (module: string, res: HttpErrorResponse, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n     res.error,\n     options.errors.key,\n     options[module].defaultErrors,\n   ),\n };\n messages?: NbPasswordStrategyMessage = {\n   key: 'data.messages',\n   getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n     res.body,\n     options.messages.key,\n     options[module].defaultMessages,\n   ),\n };\n validation?: {\n   password?: {\n     required?: boolean;\n     minLength?: number | null;\n     maxLength?: number | null;\n     regexp?: string | null;\n   };\n   email?: {\n     required?: boolean;\n     regexp?: string | null;\n   };\n   fullName?: {\n     required?: boolean;\n     minLength?: number | null;\n     maxLength?: number | null;\n     regexp?: string | null;\n   };\n };\n}\n```\n"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "roleProvider",
              "type": "NbRoleProvider",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "acl",
              "type": "NbAclService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbAccessChecker"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "permission",
              "type": "string",
              "required": null
            },
            {
              "name": "resource",
              "type": "string",
              "required": null
            }
          ],
          "platform": null,
          "name": "isGranted",
          "type": [
            "Observable<boolean>"
          ],
          "isStatic": false,
          "shortDescription": "Checks whether access is granted or not"
        }
      ],
      "name": "NbAccessChecker",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Access checker service."
        },
        {
          "type": "text",
          "content": "Injects `NbRoleProvider` to determine current user role, and checks access permissions using `NbAclService`\n"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "settings",
              "type": "NbAclOptions",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbAclService"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "role",
              "type": "string",
              "required": null
            },
            {
              "name": "permission",
              "type": "string",
              "required": null
            },
            {
              "name": "resource",
              "type": "",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "allow",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Allow a permission for specific resources to a role"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "role",
              "type": "string",
              "required": null
            },
            {
              "name": "permission",
              "type": "string",
              "required": null
            },
            {
              "name": "resource",
              "type": "string",
              "required": null
            }
          ],
          "platform": null,
          "name": "can",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "Check whether the role has a permission to a resource"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "role",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "permission",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "resource",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "exactCan",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "role",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getRole",
          "type": [
            "NbAclRole"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "role",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getRoleAbilities",
          "type": [
            "{}"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "role",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getRoleParent",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "role",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "permission",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getRoleResources",
          "type": [
            "string[]"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "role",
              "type": "string",
              "required": null
            },
            {
              "name": "parent",
              "type": "string",
              "required": null
            },
            {
              "name": "abilities",
              "type": "",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "register",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Register a new role with a list of abilities (permission/resources combinations)"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "list",
              "type": "\n",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "setAccessControl",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Set/Reset ACL list"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "resource",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "validateResource",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "role",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "validateRole",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbAclService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Common acl service."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "accordionItem",
              "type": "NbAccordionItemComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "el",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "cd",
              "type": "ChangeDetectorRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbAccordionItemBodyComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbAccordionItemBodyComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Component intended to be used within `<nb-accordion-item>` component"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "accordionItem",
              "type": "NbAccordionItemComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "cd",
              "type": "ChangeDetectorRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbAccordionItemHeaderComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "toggle",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbAccordionItemHeaderComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Component intended to be used within `<nb-accordion-item>` component"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<boolean>",
          "required": null,
          "name": "collapsedChange",
          "shortDescription": "Emits whenever the expanded state of the accordion changes.\nPrimarily used to facilitate two-way binding."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "collapsed",
          "shortDescription": "Item is collapse (`true` by default)"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "disabled",
          "shortDescription": "Item is disabled and cannot be opened."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "expanded",
          "shortDescription": "Item is expanded (`false` by default)"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "accordion",
              "type": "NbAccordionComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "cd",
              "type": "ChangeDetectorRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbAccordionItemComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "close",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Collapse the item."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "invalidate",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "ngOnChanges",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "open",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Open the item."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "toggle",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Open/close the item"
        }
      ],
      "name": "NbAccordionItemComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Component intended to be used within `<nb-accordion>` component"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "multi",
          "shortDescription": " Allow multiple items to be expanded at the same time."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "closeAll",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Closes all enabled accordion items."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "openAll",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Opens all enabled accordion items."
        }
      ],
      "name": "NbAccordionComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "accordion-padding",
              "description": ""
            },
            {
              "name": "accordion-separator",
              "description": ""
            },
            {
              "name": "accordion-header-font-family",
              "description": ""
            },
            {
              "name": "accordion-header-font-size",
              "description": ""
            },
            {
              "name": "accordion-header-font-weight",
              "description": ""
            },
            {
              "name": "accordion-header-fg-heading",
              "description": ""
            },
            {
              "name": "accordion-header-disabled-fg",
              "description": ""
            },
            {
              "name": "accordion-header-border-width",
              "description": ""
            },
            {
              "name": "accordion-header-border-type",
              "description": ""
            },
            {
              "name": "accordion-header-border-color",
              "description": ""
            },
            {
              "name": "accordion-item-bg",
              "description": ""
            },
            {
              "name": "accordion-item-font-size",
              "description": ""
            },
            {
              "name": "accordion-item-font-weight",
              "description": ""
            },
            {
              "name": "accordion-item-font-family",
              "description": ""
            },
            {
              "name": "accordion-item-fg-text",
              "description": ""
            },
            {
              "name": "accordion-item-shadow",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "accordion/accordion-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "accordion/accordion-multi.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "accordion/accordion-toggle.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "An accordion allows to toggle the display of sections of content"
        },
        {
          "type": "text",
          "content": "Basic example"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "accordion/accordion-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "```ts\n<nb-accordion>\n <nb-accordion-item>\n  <nb-accordion-item-header>Product Details</nb-accordion-item-header>\n  <nb-accordion-item-body>\n    Item Content\n  </nb-accordion-item-body>\n </nb-accordion-item>\n</nb-accordion>\n```\nWith `multi` mode acordion can have multiple items expanded:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "accordion/accordion-multi.component"
          }
        },
        {
          "type": "text",
          "content": "`NbAccordionItemComponent` has several method, for example it is possible to trigger item click/toggle:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "accordion/accordion-toggle.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "badgePosition",
          "shortDescription": "Badge position.\nCan be set to any class or to one of predefined positions:\n'top left', 'top right', 'bottom left', 'bottom right',\n'top start', 'top end', 'bottom start', 'bottom end'"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "badgeStatus",
          "shortDescription": "Badge status (adds specific styles):\n'primary', 'info', 'success', 'warning', 'danger'"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "badgeText",
          "shortDescription": "Badge text to display"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "icon",
          "shortDescription": "Icon class to display"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "disabled",
          "shortDescription": "Disables the item (changes item opacity and mouse cursor)"
        }
      ],
      "methods": [],
      "name": "NbActionComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Action item, display a link with an icon, or any other content provided instead."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "fullWidth",
          "shortDescription": "Component will fill full width of the container"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "inverse",
          "shortDescription": "Makes colors inverse based on current theme"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "size",
          "shortDescription": "Size of the component, small|medium|large"
        }
      ],
      "methods": [],
      "name": "NbActionsComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "actions-font-size",
              "description": ""
            },
            {
              "name": "actions-font-family",
              "description": ""
            },
            {
              "name": "actions-line-height",
              "description": ""
            },
            {
              "name": "actions-fg",
              "description": ""
            },
            {
              "name": "actions-bg",
              "description": ""
            },
            {
              "name": "actions-separator",
              "description": ""
            },
            {
              "name": "actions-padding",
              "description": ""
            },
            {
              "name": "actions-size-small",
              "description": ""
            },
            {
              "name": "actions-size-medium",
              "description": ""
            },
            {
              "name": "actions-size-large",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "action/action-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Multiple Sizes",
            "id": "action/action-sizes.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Action Badge",
            "id": "action/action-badge.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Full Width",
            "id": "action/action-width.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Shows a horizontal list of actions, available in multiple sizes.\nAligns items vertically."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "action/action-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Basic actions setup:\n```html\n<nb-actions size=\"small\">\n  <nb-action icon=\"nb-search\"></nb-action>\n  <nb-action icon=\"nb-power-circled\"></nb-action>\n  <nb-action icon=\"nb-person\"></nb-action>\n</nb-actions>\n```\n\nMultiple sizes example:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Multiple Sizes",
            "id": "action/action-sizes.component"
          }
        },
        {
          "type": "text",
          "content": "It is also possible to specify a `badge` value:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Action Badge",
            "id": "action/action-badge.component"
          }
        },
        {
          "type": "text",
          "content": "and we can set it to full a width of a parent component"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Full Width",
            "id": "action/action-width.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<Object>",
          "required": null,
          "name": "close",
          "shortDescription": "Emits when chip is removed"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "closable",
          "shortDescription": "Shows `close` icon"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "accent",
          "shortDescription": "Alert accent (color of the top border):\nactive, disabled, primary, info, success, warning, danger"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "outline",
          "shortDescription": "Alert outline (color of the border):\nactive, disabled, primary, info, success, warning, danger"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "size",
          "shortDescription": "Alert size, available sizes:\nxxsmall, xsmall, small, medium, large, xlarge, xxlarge"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "status",
          "shortDescription": "Alert status (adds specific styles):\nactive, disabled, primary, info, success, warning, danger"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onClose",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Emits the removed chip event"
        }
      ],
      "name": "NbAlertComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "alert-font-size",
              "description": ""
            },
            {
              "name": "alert-line-height",
              "description": ""
            },
            {
              "name": "alert-font-weight",
              "description": ""
            },
            {
              "name": "alert-fg",
              "description": ""
            },
            {
              "name": "alert-outline-fg",
              "description": ""
            },
            {
              "name": "alert-bg",
              "description": ""
            },
            {
              "name": "alert-active-bg",
              "description": ""
            },
            {
              "name": "alert-disabled-bg",
              "description": ""
            },
            {
              "name": "alert-disabled-fg",
              "description": ""
            },
            {
              "name": "alert-primary-bg",
              "description": ""
            },
            {
              "name": "alert-info-bg",
              "description": ""
            },
            {
              "name": "alert-success-bg",
              "description": ""
            },
            {
              "name": "alert-warning-bg",
              "description": ""
            },
            {
              "name": "alert-danger-bg",
              "description": ""
            },
            {
              "name": "alert-height-xxsmall",
              "description": ""
            },
            {
              "name": "alert-height-xsmall",
              "description": ""
            },
            {
              "name": "alert-height-small",
              "description": ""
            },
            {
              "name": "alert-height-medium",
              "description": ""
            },
            {
              "name": "alert-height-large",
              "description": ""
            },
            {
              "name": "alert-height-xlarge",
              "description": ""
            },
            {
              "name": "alert-height-xxlarge",
              "description": ""
            },
            {
              "name": "alert-shadow",
              "description": ""
            },
            {
              "name": "alert-border-radius",
              "description": ""
            },
            {
              "name": "alert-padding",
              "description": ""
            },
            {
              "name": "alert-closable-padding",
              "description": ""
            },
            {
              "name": "alert-button-padding",
              "description": ""
            },
            {
              "name": "alert-margin",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "alert/alert-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Alert",
            "id": "alert/alert-colors.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Accent Alert",
            "id": "alert/alert-accents.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Outline Alert",
            "id": "alert/alert-outline.component"
          }
        },
        {
          "type": "additional-example",
          "content": {
            "name": "Multiple Sizes",
            "id": "alert/alert-sizes.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Alert component."
        },
        {
          "type": "text",
          "content": "Basic alert example:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "alert/alert-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Alert configuration:\n\n```html\n<nb-alert status=\"success\">\n  You have been successfully authenticated!\n</nb-alert>\n```\n\nAlert could additionally have a `close` button when `closable` property is set:\n```html\n<nb-alert status=\"success\" closable (close)=\"onClose()\">\n  You have been successfully authenticated!\n</nb-alert>\n```\n\nColored alerts could be simply configured by providing a `status` property:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Alert",
            "id": "alert/alert-colors.component"
          }
        },
        {
          "type": "text",
          "content": "It is also possible to assign an `accent` property for a slight alert highlight\nas well as combine it with `status`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Accent Alert",
            "id": "alert/alert-accents.component"
          }
        },
        {
          "type": "text",
          "content": "And `outline` property:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Outline Alert",
            "id": "alert/alert-outline.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "position",
          "shortDescription": "Badge position",
          "description": "Can be set to any class or to one of predefined positions:\n'top left', 'top right', 'bottom left', 'bottom right',\n'top start', 'top end', 'bottom start', 'bottom end'"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "text",
          "shortDescription": "Text to display"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "status",
          "shortDescription": "Badge status (adds specific styles):\n'primary', 'info', 'success', 'warning', 'danger'"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "layoutDirectionService",
              "type": "NbLayoutDirectionService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbBadgeComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbBadgeComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "badge-fg-text",
              "description": ""
            },
            {
              "name": "badge-primary-bg-color",
              "description": ""
            },
            {
              "name": "badge-success-bg-color",
              "description": ""
            },
            {
              "name": "badge-info-bg-color",
              "description": ""
            },
            {
              "name": "badge-warning-bg-color",
              "description": ""
            },
            {
              "name": "badge-danger-bg-color",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "badge/badge-showcase.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Badge is a simple labeling component.\nIt can be used to add additional information to any content or highlight unread items."
        },
        {
          "type": "text",
          "content": "Element is absolute positioned, so parent should be\n[positioned element](https://developer.mozilla.org/en-US/docs/Web/CSS/position).\nIt means parent `position` should be set to anything except `static`, e.g. `relative`,\n`absolute`, `fixed`, or `sticky`.\n\n\nBadge with default position and status(color):\n\n```html\n<nb-badge text=\"badgeText\"></nb-badge>\n```\n\nFor example, badge can be placed into nb-card header:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "badge/badge-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Badge located on the bottom right with warning status:\n\n```html\n<nb-badge text=\"badgeText\" status=\"warning\" position=\"bottom right\">\n</nb-badge>\n```"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "disabled",
          "shortDescription": "Disables the button"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "any",
          "required": null,
          "name": "fullWidth",
          "shortDescription": "If set element will fill its container"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "hero",
          "shortDescription": "Adds `hero` styles"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "outline",
          "shortDescription": "Adds `outline` styles"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "shape",
          "shortDescription": "Button shapes: `rectangle`, `round`, `semi-round`"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "size",
          "shortDescription": "Button size, available sizes:\n`xxsmall`, `xsmall`, `small`, `medium`, `large`"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "status",
          "shortDescription": "Button status (adds specific styles):\n`primary`, `info`, `success`, `warning`, `danger`"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "event",
              "type": "Event",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "onClick",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbButtonComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "btn-fg",
              "description": ""
            },
            {
              "name": "btn-font-family",
              "description": ""
            },
            {
              "name": "btn-line-height",
              "description": ""
            },
            {
              "name": "btn-disabled-opacity",
              "description": ""
            },
            {
              "name": "btn-cursor",
              "description": ""
            },
            {
              "name": "btn-primary-bg",
              "description": ""
            },
            {
              "name": "btn-secondary-bg",
              "description": ""
            },
            {
              "name": "btn-info-bg",
              "description": ""
            },
            {
              "name": "btn-success-bg",
              "description": ""
            },
            {
              "name": "btn-warning-bg",
              "description": ""
            },
            {
              "name": "btn-danger-bg",
              "description": ""
            },
            {
              "name": "btn-secondary-border",
              "description": ""
            },
            {
              "name": "btn-secondary-border-width",
              "description": ""
            },
            {
              "name": "btn-padding-y-lg",
              "description": ""
            },
            {
              "name": "btn-padding-x-lg",
              "description": ""
            },
            {
              "name": "btn-font-size-lg",
              "description": ""
            },
            {
              "name": "btn-padding-y-md",
              "description": ""
            },
            {
              "name": "btn-padding-x-md",
              "description": ""
            },
            {
              "name": "btn-font-size-md",
              "description": ""
            },
            {
              "name": "btn-padding-y-sm",
              "description": ""
            },
            {
              "name": "btn-padding-x-sm",
              "description": ""
            },
            {
              "name": "btn-font-size-sm",
              "description": ""
            },
            {
              "name": "btn-padding-y-xs",
              "description": ""
            },
            {
              "name": "btn-padding-x-xs",
              "description": ""
            },
            {
              "name": "btn-font-size-xs",
              "description": ""
            },
            {
              "name": "btn-border-radius",
              "description": ""
            },
            {
              "name": "btn-rectangle-border-radius",
              "description": ""
            },
            {
              "name": "btn-semi-round-border-radius",
              "description": ""
            },
            {
              "name": "btn-round-border-radius",
              "description": ""
            },
            {
              "name": "btn-hero-shadow",
              "description": ""
            },
            {
              "name": "btn-hero-text-shadow",
              "description": ""
            },
            {
              "name": "btn-hero-bevel-size",
              "description": ""
            },
            {
              "name": "btn-hero-glow-size",
              "description": ""
            },
            {
              "name": "btn-hero-primary-glow-size",
              "description": ""
            },
            {
              "name": "btn-hero-success-glow-size",
              "description": ""
            },
            {
              "name": "btn-hero-warning-glow-size",
              "description": ""
            },
            {
              "name": "btn-hero-info-glow-size",
              "description": ""
            },
            {
              "name": "btn-hero-danger-glow-size",
              "description": ""
            },
            {
              "name": "btn-hero-secondary-glow-size",
              "description": ""
            },
            {
              "name": "btn-hero-degree",
              "description": ""
            },
            {
              "name": "btn-hero-primary-degree",
              "description": ""
            },
            {
              "name": "btn-hero-success-degree",
              "description": ""
            },
            {
              "name": "btn-hero-warning-degree",
              "description": ""
            },
            {
              "name": "btn-hero-info-degree",
              "description": ""
            },
            {
              "name": "btn-hero-danger-degree",
              "description": ""
            },
            {
              "name": "btn-hero-secondary-degree",
              "description": ""
            },
            {
              "name": "btn-hero-border-radius",
              "description": ""
            },
            {
              "name": "btn-outline-fg",
              "description": ""
            },
            {
              "name": "btn-outline-hover-fg",
              "description": ""
            },
            {
              "name": "btn-outline-focus-fg",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Button Showcase",
            "id": "button/button-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Button Colors",
            "id": "button/button-colors.component.html"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Button Sizes",
            "id": "button/button-sizes.component.html"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Outline Buttons",
            "id": "button/button-outline.component.html"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Button Colors",
            "id": "button/button-hero.component.html"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Button Shapes",
            "id": "button/button-shapes.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Button Elements",
            "id": "button/button-types.component.html"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Full Width Button",
            "id": "button/button-full-width.component.html"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Basic button component."
        },
        {
          "type": "text",
          "content": "Default button size is `medium` and status color is `primary`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Button Showcase",
            "id": "button/button-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "```html\n<button nbButton></button>\n```\n\nButtons are available in multiple colors using `status` property:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Button Colors",
            "id": "button/button-colors.component.html"
          }
        },
        {
          "type": "text",
          "content": "There are three button sizes:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Button Sizes",
            "id": "button/button-sizes.component.html"
          }
        },
        {
          "type": "text",
          "content": "And two additional style types - `outline`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Outline Buttons",
            "id": "button/button-outline.component.html"
          }
        },
        {
          "type": "text",
          "content": "and `hero`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Button Colors",
            "id": "button/button-hero.component.html"
          }
        },
        {
          "type": "text",
          "content": "Buttons available in different shapes, which could be combined with the other properties:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Button Shapes",
            "id": "button/button-shapes.component"
          }
        },
        {
          "type": "text",
          "content": "`nbButton` could be applied to the following selectors - `button`, `input[type=\"button\"]`, `input[type=\"submit\"]`\nand `a`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Button Elements",
            "id": "button/button-types.component.html"
          }
        },
        {
          "type": "text",
          "content": "Button can be made `fullWidth`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Full Width Button",
            "id": "button/button-full-width.component.html"
          }
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbCalendarKitModule",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Full calendar",
            "id": "calendar-kit/calendar-kit-full-calendar.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "`NbCalendarKitModule` is a module that contains multiple useful components for building custom calendars.\nSo if you think our calendars is not enough powerful for you just use calendar-kit and build your own calendar!"
        },
        {
          "type": "text",
          "content": "Available components:\n- `NbCalendarDayPicker`\n- `NbCalendarDayCell`\n- `NbCalendarMonthPicker`\n- `NbCalendarMonthCell`\n- `NbCalendarYearPicker`\n- `NbCalendarYearCell`\n- `NbCalendarHeader`\n- `NbCalendarNavigation`\n- `NbCalendarPageableNavigation`\n\nFor example you can easily build full calendar:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Full calendar",
            "id": "calendar-kit/calendar-kit-full-calendar.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "boundingMonths",
          "shortDescription": "Defines if we should render previous and next months\nin the current month view."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "date",
          "shortDescription": "Already selected date."
        },
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<D>",
          "required": null,
          "name": "dateChange",
          "shortDescription": "Fires newly selected date."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "filter",
          "shortDescription": "Predicate that decides which cells will be disabled."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "max",
          "shortDescription": "Maximum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "min",
          "shortDescription": "Minimum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarSize",
          "required": null,
          "name": "size",
          "shortDescription": "Size of the component.\nCan be 'medium' which is default or 'large'."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "visibleDate",
          "shortDescription": "Describes which month picker have to render."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "undefined[]",
          "required": null,
          "name": "weeks",
          "shortDescription": "Day picker model.\nProvides all days in current month and if boundingMonth is true some days\nfrom previous and next one."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type",
          "required": null,
          "name": "cellComponent",
          "shortDescription": "Custom day cell component. Have to implement `NbCalendarCell` interface."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "monthModel",
              "type": "NbCalendarMonthModelService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbCalendarDayPickerComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "__namedParameters",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "ngOnChanges",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "day",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "onSelect",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbCalendarDayPickerComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Provides capability pick days."
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "locale",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbNativeDateService"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "num",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "addDay",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "num",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "addMonth",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "num",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "addYear",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "clone",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date1",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "date2",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "compareDates",
          "type": [
            "number"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "year",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "month",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "date",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createDate",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "format",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "format",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getDate",
          "type": [
            "number"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getDayOfWeek",
          "type": [
            "number"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getDayOfWeekNames",
          "type": [
            "string[]"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getFirstDayOfWeek",
          "type": [
            "number"
          ],
          "isStatic": false,
          "shortDescription": "returns first day of the week, it can be 1 if week starts from monday\nand 0 if from sunday and so on."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getMonth",
          "type": [
            "number"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getMonthEnd",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "style",
              "type": "TranslationWidth",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getMonthName",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "index",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "style",
              "type": "TranslationWidth",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getMonthNameByIndex",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getMonthStart",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getNumberOfDaysInMonth",
          "type": [
            "number"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getYear",
          "type": [
            "number"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getYearEnd",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getYearStart",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "start",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "end",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isBetween",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Checks if the date is between the start date and the end date."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date1",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "date2",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isSameDay",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date1",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "date2",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isSameDaySafe",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Checks is two dates have the same day."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date1",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "date2",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isSameMonth",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date1",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "date2",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isSameMonthSafe",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Checks is two dates have the same month."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date1",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "date2",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isSameYear",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date1",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "date2",
              "type": "Date",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isSameYearSafe",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Checks is two dates have the same year."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "format",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isValidDateString",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "format",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "parse",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "We haven't got capability to parse date using formatting without third party libraries."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "locale",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setLocale",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "today",
          "type": [
            "Date"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbNativeDateService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "The `NbNativeDateService` is basic implementation of `NbDateService` using\nnative js date objects and angular localization services."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarViewMode",
          "required": null,
          "name": "startView",
          "shortDescription": "Defines active view for calendar."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "boundingMonth",
          "shortDescription": "Defines if we should render previous and next months\nin the current month view."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "date",
          "shortDescription": "Value which will be rendered as selected."
        },
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<T>",
          "required": null,
          "name": "dateChange",
          "shortDescription": "Emits date when selected."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "dayCellComponent",
          "shortDescription": "Custom day cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "filter",
          "shortDescription": "Predicate that decides which cells will be disabled."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "max",
          "shortDescription": "Maximum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "min",
          "shortDescription": "Minimum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "monthCellComponent",
          "shortDescription": "Custom month cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarSize",
          "required": null,
          "name": "size",
          "shortDescription": "Size of the calendar and entire components.\nCan be 'medium' which is default or 'large'."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "yearCellComponent",
          "shortDescription": "Custom year cell component. Have to implement `NbCalendarCell` interface."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "dateService",
              "type": "NbDateService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbBaseCalendarComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "direction",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "changeVisibleMonth",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "direction",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "changeVisibleYear",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "navigateToday",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "nextMonth",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "nextYears",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "prevMonth",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "prevYears",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "viewMode",
              "type": "NbCalendarViewMode",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setViewMode",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "visibleDate",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setVisibleDate",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbBaseCalendarComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "The basis for calendar and range calendar components.\nEncapsulates common behavior - store calendar state and perform navigation\nbetween pickers."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "boundingMonth",
          "shortDescription": "Defines if we should render previous and next months\nin the current month view."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "filter",
          "shortDescription": "A predicate that decides which cells will be disabled."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "max",
          "shortDescription": "A maximum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "min",
          "shortDescription": "A minimum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "monthCellComponent",
          "shortDescription": "Custom month cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarRange<D>",
          "required": null,
          "name": "range",
          "shortDescription": "Range which will be rendered as selected."
        },
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<NbCalendarRange>",
          "required": null,
          "name": "rangeChange",
          "shortDescription": "Emits range when start selected and emits again when end selected."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarSize",
          "required": null,
          "name": "size",
          "shortDescription": "Size of the calendar and entire components.\nCan be 'medium' which is default or 'large'."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarViewMode",
          "required": null,
          "name": "startView",
          "shortDescription": "Defines starting view for the calendar."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type",
          "required": null,
          "name": "dayCellComponent",
          "shortDescription": "Custom day cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type",
          "required": null,
          "name": "yearCellComponent",
          "shortDescription": "Custom year cell component. Have to implement `NbCalendarCell` interface."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "dateService",
              "type": "NbDateService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbCalendarRangeComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "handleSelected",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "initDateIfNull",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "onChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "date",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "selectEnd",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "range",
              "type": "NbCalendarRange",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "selectRange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "start",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "selectStart",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "selectionStarted",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbCalendarRangeComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Calendar component provides a capability to choose ranges.\nFor additional info check `NbBaseCalendarComponent`."
        },
        {
          "type": "text",
          "content": "```html\n<nb-calendar-range [(range)]=\"range\"></nb-calendar-range>\n```\n"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "boundingMonth",
          "shortDescription": "Defines if we should render previous and next months\nin the current month view."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "date",
          "shortDescription": "Date which will be rendered as selected."
        },
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<D>",
          "required": null,
          "name": "dateChange",
          "shortDescription": "Emits date when selected."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "dayCellComponent",
          "shortDescription": "Custom day cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "filter",
          "shortDescription": "Predicate that decides which cells will be disabled."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "max",
          "shortDescription": "Maximum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "min",
          "shortDescription": "Minimum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "monthCellComponent",
          "shortDescription": "Custom month cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarSize",
          "required": null,
          "name": "size",
          "shortDescription": "Size of the calendar and entire components.\nCan be 'medium' which is default or 'large'."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarViewMode",
          "required": null,
          "name": "startView",
          "shortDescription": "Defines starting view for calendar."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "yearCellComponent",
          "shortDescription": "Custom year cell component. Have to implement `NbCalendarCell` interface."
        }
      ],
      "methods": [],
      "name": "NbCalendarComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "calendar-width",
              "description": ""
            },
            {
              "name": "calendar-height",
              "description": ""
            },
            {
              "name": "calendar-header-title-font-size",
              "description": ""
            },
            {
              "name": "calendar-header-title-font-weight",
              "description": ""
            },
            {
              "name": "calendar-header-sub-title-font-size",
              "description": ""
            },
            {
              "name": "calendar-header-sub-title-font-weight",
              "description": ""
            },
            {
              "name": "calendar-navigation-button-width",
              "description": ""
            },
            {
              "name": "calendar-selected-item-bg",
              "description": ""
            },
            {
              "name": "calendar-hover-item-bg",
              "description": ""
            },
            {
              "name": "calendar-today-item-bg",
              "description": ""
            },
            {
              "name": "calendar-active-item-bg",
              "description": ""
            },
            {
              "name": "calendar-fg",
              "description": ""
            },
            {
              "name": "calendar-selected-fg",
              "description": ""
            },
            {
              "name": "calendar-day-cell-width",
              "description": ""
            },
            {
              "name": "calendar-day-cell-height",
              "description": ""
            },
            {
              "name": "calendar-month-cell-width",
              "description": ""
            },
            {
              "name": "calendar-month-cell-height",
              "description": ""
            },
            {
              "name": "calendar-year-cell-width",
              "description": ""
            },
            {
              "name": "calendar-year-cell-height",
              "description": ""
            },
            {
              "name": "calendar-inactive-opacity",
              "description": ""
            },
            {
              "name": "calendar-disabled-opacity",
              "description": ""
            },
            {
              "name": "calendar-border-radius",
              "description": ""
            },
            {
              "name": "calendar-weekday-width",
              "description": ""
            },
            {
              "name": "calendar-weekday-height",
              "description": ""
            },
            {
              "name": "calendar-weekday-font-size",
              "description": ""
            },
            {
              "name": "calendar-weekday-font-weight",
              "description": ""
            },
            {
              "name": "calendar-weekday-fg",
              "description": ""
            },
            {
              "name": "calendar-weekday-holiday-fg",
              "description": ""
            },
            {
              "name": "calendar-range-bg-in-range",
              "description": ""
            },
            {
              "name": "calendar-large-width",
              "description": ""
            },
            {
              "name": "calendar-large-height",
              "description": ""
            },
            {
              "name": "calendar-day-cell-large-width",
              "description": ""
            },
            {
              "name": "calendar-day-cell-large-height",
              "description": ""
            },
            {
              "name": "calendar-month-cell-large-width",
              "description": ""
            },
            {
              "name": "calendar-month-cell-large-height",
              "description": ""
            },
            {
              "name": "calendar-year-cell-large-width",
              "description": ""
            },
            {
              "name": "calendar-year-cell-large-height",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "calendar/calendar-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Range",
            "id": "calendar/calendar-range-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Bounding months",
            "id": "calendar/calendar-bounding-month.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Start view",
            "id": "calendar/calendar-start-view.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Size",
            "id": "calendar/calendar-size.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Borders",
            "id": "calendar/calendar-min-max.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Filter",
            "id": "calendar/calendar-filter.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Custom day cell",
            "id": "calendar/calendar-custom-day-cell-showcase.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Calendar component provides a capability to choose a date."
        },
        {
          "type": "text",
          "content": "```html\n<nb-calendar [(date)]=\"date\"></nb-calendar>\n<nb-calendar [date]=\"date\" (dateChange)=\"handleDateChange($event)\"></nb-calendar>\n```\n\nBasic usage example"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "calendar/calendar-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "If you want to select ranges you can use `NbCalendarRangeComponent`.\n\n```html\n<nb-calendar-range [(range)]=\"range\"></nb-calendar-range>\n<nb-calendar-range [range]=\"range\" (rangeChange)=\"handleRangeChange($event)\"></nb-calendar-range>\n```\n\nIn order to use it, you have to import `NbCalendarRangeModule`."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Range",
            "id": "calendar/calendar-range-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "As you can see in the basic usage example calendar contains previous and next month days\nwhich can be disabled using `boundingMonth` property."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Bounding months",
            "id": "calendar/calendar-bounding-month.component"
          }
        },
        {
          "type": "text",
          "content": "You can define starting view of the calendar by setting `startView` property.\nAvailable values: year, month and date."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Start view",
            "id": "calendar/calendar-start-view.component"
          }
        },
        {
          "type": "text",
          "content": "You can use a larger version of the calendar by defining size property.\nAvailable values: medium(which is default) and large."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Size",
            "id": "calendar/calendar-size.component"
          }
        },
        {
          "type": "text",
          "content": "Calendar supports min and max dates which disables values out of min-max range."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Borders",
            "id": "calendar/calendar-min-max.component"
          }
        },
        {
          "type": "text",
          "content": "Also, you can define custom filter property that should be predicate which receives\ndate and returns false if this date has to be disabled. In this example, we provide the filter\nwhich disables weekdays."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Filter",
            "id": "calendar/calendar-filter.component"
          }
        },
        {
          "type": "text",
          "content": "If you need create custom cells you can easily provide custom components for\ncalendar. For examples if you want to show any average price under each date you can\njust provide custom `dayCellComponent`. Custom cells for month and year can be provided\nthe same way, check API reference."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Custom day cell",
            "id": "calendar/calendar-custom-day-cell-showcase.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbCardBodyComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Component intended to be used within  the `<nb-card>` component.\nAdds styles for a preset body section."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "accent",
          "shortDescription": "Card accent (color of the top border):\nactive, disabled, primary, info, success, warning, danger"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "size",
          "shortDescription": "Card size, available sizes:\nxxsmall, xsmall, small, medium, large, xlarge, xxlarge"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "status",
          "shortDescription": "Card status (adds specific styles):\nactive, disabled, primary, info, success, warning, danger"
        }
      ],
      "methods": [],
      "name": "NbCardComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "card-line-height",
              "description": ""
            },
            {
              "name": "card-font-weight",
              "description": ""
            },
            {
              "name": "card-fg-text",
              "description": ""
            },
            {
              "name": "card-bg",
              "description": ""
            },
            {
              "name": "card-height-xxsmall",
              "description": ""
            },
            {
              "name": "card-height-xsmall",
              "description": ""
            },
            {
              "name": "card-height-small",
              "description": ""
            },
            {
              "name": "card-height-medium",
              "description": ""
            },
            {
              "name": "card-height-large",
              "description": ""
            },
            {
              "name": "card-height-xlarge",
              "description": ""
            },
            {
              "name": "card-height-xxlarge",
              "description": ""
            },
            {
              "name": "card-shadow",
              "description": ""
            },
            {
              "name": "card-border-radius",
              "description": ""
            },
            {
              "name": "card-padding",
              "description": ""
            },
            {
              "name": "card-margin",
              "description": ""
            },
            {
              "name": "card-separator",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "card/card-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "With Header & Footer",
            "id": "card/card-full.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "card/card-without-body.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Card",
            "id": "card/card-colors.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Accent Card",
            "id": "card/card-accents.component"
          }
        },
        {
          "type": "additional-example",
          "content": {
            "name": "Multiple Sizes",
            "id": "card/card-sizes.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Basic content container component."
        },
        {
          "type": "text",
          "content": "Basic card example:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "card/card-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Basic card configuration:\n\n```html\n<nb-card>\n  <nb-card-body>\n    Card\n  </nb-card-body>\n</nb-card>\n```\nCard with header and footer:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "With Header & Footer",
            "id": "card/card-full.component"
          }
        },
        {
          "type": "text",
          "content": "Most of the time main card content goes to `nb-card-body`,\nso it is styled and aligned in accordance with the header and footer.\nIn case you need a higher level of control, you can pass contend directly to `nb-card`,\nso `nb-card-body` styling will not be applied.\n\nConsider an example with `nb-list` component:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "card/card-without-body.component"
          }
        },
        {
          "type": "text",
          "content": "Colored cards could be simply configured by providing a `status` property:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Card",
            "id": "card/card-colors.component"
          }
        },
        {
          "type": "text",
          "content": "It is also possible to assign an `accent` property for a slight card highlight\nas well as combine it with `status`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Accent Card",
            "id": "card/card-accents.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbCardFooterComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Component intended to be used within  the `<nb-card>` component.\nAdds styles for a preset footer section."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbCardHeaderComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "card-header-font-family",
              "description": ""
            },
            {
              "name": "card-header-font-size",
              "description": ""
            },
            {
              "name": "card-header-font-weight",
              "description": ""
            },
            {
              "name": "card-header-fg",
              "description": ""
            },
            {
              "name": "card-header-fg-heading",
              "description": ""
            },
            {
              "name": "card-header-active-bg",
              "description": ""
            },
            {
              "name": "card-header-active-fg",
              "description": ""
            },
            {
              "name": "card-header-disabled-bg",
              "description": ""
            },
            {
              "name": "card-header-primary-bg",
              "description": ""
            },
            {
              "name": "card-header-info-bg",
              "description": ""
            },
            {
              "name": "card-header-success-bg",
              "description": ""
            },
            {
              "name": "card-header-warning-bg",
              "description": ""
            },
            {
              "name": "card-header-danger-bg",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Component intended to be used within the `<nb-card>` component.\nIt adds styles for a preset header section."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "flipped",
          "shortDescription": "Flip state"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "showToggleButton",
          "shortDescription": "Show/hide toggle button to be able to control toggle from your code"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "toggle",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbFlipCardComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "flip-card/flip-card-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "With Header & Footer",
            "id": "flip-card/flip-card-full.component.ts"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Card",
            "id": "flip-card/flip-card-colors.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Accent Card",
            "id": "flip-card/flip-card-accents.component"
          }
        },
        {
          "type": "additional-example",
          "content": {
            "name": "Multiple Sizes",
            "id": "flip-card/flip-card-sizes.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Flip card example:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "flip-card/flip-card-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "As a content Flip card accepts two instances of `nb-card` - for front and back sides.\n\nBasic flip card configuration:\n\n```html\n<nb-flip-card>\n  <nb-card-front>\n    <nb-card>\n      <nb-card-body>\n        Front\n      </nb-card-body>\n    </nb-card>\n  </nb-card-front>\n  <nb-card-back>\n    <nb-card>\n      <nb-card-body>\n        Back\n      </nb-card-body>\n    </nb-card>\n  </nb-card-back>\n</nb-flip-card>\n```\n\nFlip Card with header and footer:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "With Header & Footer",
            "id": "flip-card/flip-card-full.component.ts"
          }
        },
        {
          "type": "text",
          "content": "Colored flip-cards could be simply configured by providing a `status` property:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Card",
            "id": "flip-card/flip-card-colors.component"
          }
        },
        {
          "type": "text",
          "content": "It is also possible to assign an `accent` property for a slight card highlight\nas well as combine it with `status`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Accent Card",
            "id": "flip-card/flip-card-accents.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "revealed",
          "shortDescription": "Reveal state"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "showToggleButton",
          "shortDescription": "Show/hide toggle button to be able to control toggle from your code"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "toggle",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbRevealCardComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "My example",
            "id": "reveal-card/reveal-card-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "With Header & Footer",
            "id": "reveal-card/reveal-card-full.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Card",
            "id": "reveal-card/reveal-card-colors.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Accent Card",
            "id": "reveal-card/reveal-card-accents.component"
          }
        },
        {
          "type": "additional-example",
          "content": {
            "name": "Multiple Sizes",
            "id": "reveal-card/reveal-card-sizes.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Reveal card example:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "My example",
            "id": "reveal-card/reveal-card-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "As a content Reveal card accepts two instances of `nb-card` - for front and back sides.\n\nBasic reveal card configuration:\n\n```html\n<nb-reveal-card>\n  <nb-card-front>\n    <nb-card>\n      <nb-card-body>\n        Front\n      </nb-card-body>\n    </nb-card>\n  </nb-card-front>\n  <nb-card-back>\n    <nb-card>\n      <nb-card-body>\n        Back\n      </nb-card-body>\n    </nb-card>\n  </nb-card-back>\n</nb-reveal-card>\n```\n\nReveal Card with header and footer:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "With Header & Footer",
            "id": "reveal-card/reveal-card-full.component"
          }
        },
        {
          "type": "text",
          "content": "Colored reveal-cards could be simply configured by providing a `status` property:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Card",
            "id": "reveal-card/reveal-card-colors.component"
          }
        },
        {
          "type": "text",
          "content": "It is also possible to assign an `accent` property for a slight card highlight\nas well as combine it with `status`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Accent Card",
            "id": "reveal-card/reveal-card-accents.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbCardBackComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Component intended to be used within the `<nb-flip-card>` and `<nb-reveal-card>` components."
        },
        {
          "type": "text",
          "content": "Use it as a container for the back card.\n"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbCardFrontComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Component intended to be used within the `<nb-flip-card>` and `<nb-reveal-card>` components."
        },
        {
          "type": "text",
          "content": "Use it as a container for the front card.\n"
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "enabled",
          "shortDescription": "Whether the focus trap is active."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "checker",
              "type": "InteractivityChecker",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "ngZone",
              "type": "NgZone",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "document",
              "type": "Document",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "deferAnchors",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbFocusTrap"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "attachAnchors",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Inserts the anchors into the DOM. This is usually done automatically\nin the constructor, but can be deferred for cases like directives with `*ngIf`."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "blurPreviouslyFocusedElement",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "destroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Destroys the focus trap by cleaning up the anchors."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "focusFirstTabbableElement",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Focuses the first tabbable element within the focus trap region."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "focusFirstTabbableElementWhenReady",
          "type": [
            "Returns a promise that resolves with a boolean, depending\non whether focus was moved successfuly.\n"
          ],
          "isStatic": false,
          "shortDescription": "Waits for the zone to stabilize, then focuses\nthe first tabbable element within the focus trap region."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "focusInitialElement",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Focuses the element that should be focused when the focus trap is initialized."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "focusInitialElementWhenReady",
          "type": [
            "Returns a promise that resolves with a boolean, depending\non whether focus was moved successfuly.\n"
          ],
          "isStatic": false,
          "shortDescription": "Waits for the zone to stabilize, then either focuses the first element that the\nuser specified, or the first tabbable element."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "focusLastTabbableElement",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Focuses the last tabbable element within the focus trap region."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "focusLastTabbableElementWhenReady",
          "type": [
            "Returns a promise that resolves with a boolean, depending\non whether focus was moved successfuly.\n"
          ],
          "isStatic": false,
          "shortDescription": "Waits for the zone to stabilize, then focuses\nthe last tabbable element within the focus trap region."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "restoreFocus",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "savePreviouslyFocusedElement",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbFocusTrap",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Overrides angular cdk focus trap to keep restore functionality inside trap."
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "_document",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbOverlayContainerAdapter"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "_createContainer",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "clearContainer",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getContainerElement",
          "type": [
            "the container element\n"
          ],
          "isStatic": false,
          "shortDescription": "This method returns the overlay container element. It will lazily\ncreate the element the first time  it is called to facilitate using\nthe container in non-browser environments."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "container",
              "type": "HTMLElement",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setContainer",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbOverlayContainerAdapter",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Provides nb-layout as overlay container.\nContainer has to be cleared when layout destroys.\nAnother way previous version of the container will be used\nbut it isn't inserted in DOM and exists in memory only.\nThis case important only if you switch between multiple layouts."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbCdkMappingModule",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "This module helps us to keep all angular/cdk deps inside our cdk module via providing aliases.\nApproach will help us move cdk in separate npm package and refactor nebular/theme code."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ConnectionPositionPair[]",
          "required": null,
          "name": "_preferredPositions",
          "shortDescription": "Ordered list of preferred positions, from most to least desirable."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Observable<ConnectedOverlayPositionChange>",
          "required": null,
          "name": "positionChanges",
          "shortDescription": "Observable sequence of position changes."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ConnectionPositionPair[]",
          "required": null,
          "name": "positions",
          "shortDescription": "Ordered list of preferred positions, from most to least desirable."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "_connectedTo",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "_viewportRuler",
              "type": "ViewportRuler",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "_document",
              "type": "Document",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "_platform",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbAdjustableConnectedPositionStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "adjustment",
              "type": "NbAdjustment",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "adjustment",
          "type": [
            "this"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "apply",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "applyPositions",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "overlayRef",
              "type": "NbOverlayRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "attach",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createPositions",
          "type": [
            "NbPosition[]"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "detach",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "dispose",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Cleanup after the element gets destroyed."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "offset",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "offset",
          "type": [
            "this"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "positions",
              "type": "NbPosition[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "persistChosenPositions",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "position",
              "type": "NbPosition",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "position",
          "type": [
            "this"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "reapplyLastPosition",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "This re-aligns the overlay element with the trigger in its last calculated position,\neven if a position higher in the \"preferred positions\" list would now fit. This\nallows one to re-align the panel without changing the orientation of the panel."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "positions",
              "type": "NbPosition[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "reorderPreferredPositions",
          "type": [
            "NbPosition[]"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "origin",
              "type": "Reference to the new origin element.\n",
              "required": null,
              "description": "Reference to the new origin element.\n"
            }
          ],
          "platform": null,
          "name": "setOrigin",
          "type": [
            "this"
          ],
          "isStatic": false,
          "shortDescription": "Sets the origin element, relative to which to position the overlay."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "offset",
              "type": "number",
              "required": null,
              "description": "New offset in the X axis.\n"
            }
          ],
          "platform": null,
          "name": "withDefaultOffsetX",
          "type": [
            "this"
          ],
          "isStatic": false,
          "shortDescription": "Sets the default offset for the overlay's connection point on the x-axis."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "offset",
              "type": "number",
              "required": null,
              "description": "New offset in the Y axis.\n"
            }
          ],
          "platform": null,
          "name": "withDefaultOffsetY",
          "type": [
            "this"
          ],
          "isStatic": false,
          "shortDescription": "Sets the default offset for the overlay's connection point on the y-axis."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "flexibleDimensions",
              "type": "boolean",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "withFlexibleDimensions",
          "type": [
            "this"
          ],
          "isStatic": false,
          "shortDescription": "Sets whether the overlay's width and height can be constrained to fit within the viewport."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "growAfterOpen",
              "type": "boolean",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "withGrowAfterOpen",
          "type": [
            "this"
          ],
          "isStatic": false,
          "shortDescription": "Sets whether the overlay can grow after the initial open via flexible width/height."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "isLocked",
              "type": "boolean",
              "required": null,
              "description": "Whether the overlay should locked in.\n"
            }
          ],
          "platform": null,
          "name": "withLockedPosition",
          "type": [
            "this"
          ],
          "isStatic": false,
          "shortDescription": "Sets whether the overlay's position should be locked in after it is positioned\ninitially. When an overlay is locked in, it won't attempt to reposition itself\nwhen the position is re-applied (e.g. when the user scrolls away)."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "positions",
              "type": "ConnectedPosition[]",
              "required": null,
              "description": "List of positions options for this overlay.\n"
            }
          ],
          "platform": null,
          "name": "withPositions",
          "type": [
            "this"
          ],
          "isStatic": false,
          "shortDescription": "Adds a new preferred fallback position."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "canPush",
              "type": "boolean",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "withPush",
          "type": [
            "this"
          ],
          "isStatic": false,
          "shortDescription": "Sets whether the overlay can be pushed on-screen if none of the provided positions fit."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "scrollables",
              "type": "CdkScrollable[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "withScrollableContainers",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Sets the list of Scrollable containers that host the origin element so that\non reposition we can evaluate if it or the overlay has been clipped or outside view. Every\nScrollable must be an ancestor element of the strategy's origin element."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "margin",
              "type": "number",
              "required": null,
              "description": "Required margin between the overlay and the viewport edge in pixels.\n"
            }
          ],
          "platform": null,
          "name": "withViewportMargin",
          "type": [
            "this"
          ],
          "isStatic": false,
          "shortDescription": "Sets a minimum distance the ovelray may be positioned to the edge of the viewport."
        }
      ],
      "name": "NbAdjustableConnectedPositionStrategy",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "The main idea of the adjustable connected strategy is to provide predefined set of positions for your overlay.\nYou have to provide adjustment and appropriate strategy will be chosen in runtime."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "Document",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "host",
              "type": "HTMLElement",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "container",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbClickTriggerStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "isContainerExists",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "event",
              "type": "Event",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isNotHostOrContainer",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnHostClick",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbClickTriggerStrategy",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Creates show and hide event streams.\nFires toggle event when the click was performed on the host element.\nFires close event when the click was performed on the document but\nnot on the host or container."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "Document",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "host",
              "type": "HTMLElement",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "container",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbFocusTriggerStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "event",
              "type": "Event",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isNotOnHostOrContainer",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "__namedParameters",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isOnContainer",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "__namedParameters",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isOnHost",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbFocusTriggerStrategy",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Creates show and hide event streams.\nFires open event when a focus is on the host element and stay over at least 100 milliseconds.\nFires close event when the focus leaves the host element."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "Document",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "host",
              "type": "HTMLElement",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "container",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbHintTriggerStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbHintTriggerStrategy",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Creates show and hide event streams.\nFires open event when a mouse hovers over the host element and stay over at least 100 milliseconds.\nFires close event when the mouse leaves the host element."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "Document",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "host",
              "type": "HTMLElement",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "container",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbHoverTriggerStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbHoverTriggerStrategy",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Creates show and hide event streams.\nFires open event when a mouse hovers over the host element and stay over at least 100 milliseconds.\nFires close event when the mouse leaves the host element and stops out of the host and popover container."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "Document",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "host",
              "type": "HTMLElement",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "container",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbTriggerStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbTriggerStrategy",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "TODO maybe we have to use renderer.listen instead of observableFromEvent?\nRenderer provides capability use it in service worker, ssr and so on."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "buttonIcon",
          "shortDescription": "Send button icon, shown if `buttonTitle` is empty"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "buttonTitle",
          "shortDescription": "Send button title"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "dropFiles",
          "shortDescription": "Show send button"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "message",
          "shortDescription": "Predefined message text"
        },
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<undefined>",
          "required": null,
          "name": "send"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "showButton",
          "shortDescription": "Show send button"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "cd",
              "type": "ChangeDetectorRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "domSanitizer",
              "type": "DomSanitizer",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbChatFormComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onDragLeave",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onDragOver",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "event",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "onDrop",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "file",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "removeFile",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "sendMessage",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbChatFormComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "chat-form-bg",
              "description": ""
            },
            {
              "name": "chat-form-fg",
              "description": ""
            },
            {
              "name": "chat-form-border",
              "description": ""
            },
            {
              "name": "chat-form-active-border",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Drag & Drop Chat",
            "id": "chat/chat-drop.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Chat form component."
        },
        {
          "type": "text",
          "content": "Show a message form with a send message button.\n\n```ts\n<nb-chat-form showButton=\"true\" buttonIcon=\"nb-send\">\n</nb-chat-form>\n```\n\nWhen `[dropFiles]=\"true\"` handles files drag&drop with a file preview.\n\nDrag & drop available for files and images:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Drag & Drop Chat",
            "id": "chat/chat-drop.component"
          }
        },
        {
          "type": "text",
          "content": "New message could be tracked outside by using `(send)` output.\n\n```ts\n<nb-chat-form (send)=\"onNewMessage($event)\">\n</nb-chat-form>\n\n// ...\n\nonNewMessage({ message: string, files: any[] }) {\n  this.service.sendToServer(message, files);\n}\n```"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Date",
          "required": null,
          "name": "date",
          "shortDescription": "Message send date"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "message",
          "shortDescription": "Message sender"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "sender",
          "shortDescription": "Message sender"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Date",
          "required": null,
          "name": "files",
          "shortDescription": "Message file path"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "cd",
              "type": "ChangeDetectorRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "domSanitizer",
              "type": "DomSanitizer",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbChatMessageFileComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "file",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isImage",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbChatMessageFileComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": []
        }
      ],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Chat message component."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Date",
          "required": null,
          "name": "date",
          "shortDescription": "Message send date"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "latitude",
          "shortDescription": "Map latitude"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "longitude",
          "shortDescription": "Map longitude"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "message",
          "shortDescription": "Message sender"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "sender",
          "shortDescription": "Message sender"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "options",
              "type": "NbChatOptions",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbChatMessageMapComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbChatMessageMapComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": []
        }
      ],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Chat message component."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Date",
          "required": null,
          "name": "date",
          "shortDescription": "Message send date"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "message",
          "shortDescription": "Message sender"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "quote",
          "shortDescription": "Quoted message"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "sender",
          "shortDescription": "Message sender"
        }
      ],
      "methods": [],
      "name": "NbChatMessageQuoteComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": []
        }
      ],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Chat message component."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Date",
          "required": null,
          "name": "date",
          "shortDescription": "Message send date"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "message",
          "shortDescription": "Message sender"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "sender",
          "shortDescription": "Message sender"
        }
      ],
      "methods": [],
      "name": "NbChatMessageTextComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": []
        }
      ],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Chat message component."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Date",
          "required": null,
          "name": "date",
          "shortDescription": "Message send date"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "undefined[]",
          "required": null,
          "name": "files",
          "shortDescription": "Array of files `{ url: 'file url', icon: 'file icon class' }`"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "latitude",
          "shortDescription": "Map latitude"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "longitude",
          "shortDescription": "Map longitude"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "message",
          "shortDescription": "Message sender"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "quote",
          "shortDescription": "Quoted message text"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "sender",
          "shortDescription": "Message sender"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "type",
          "shortDescription": "Message type, available options `text|file|map|quote`"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "avatar",
          "shortDescription": "Message send avatar"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "reply",
          "shortDescription": "Determines if a message is a reply"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "domSanitizer",
              "type": "DomSanitizer",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbChatMessageComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getInitials",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbChatMessageComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "chat-message-fg",
              "description": ""
            },
            {
              "name": "chat-message-bg",
              "description": ""
            },
            {
              "name": "chat-message-reply-bg",
              "description": ""
            },
            {
              "name": "chat-message-reply-fg",
              "description": ""
            },
            {
              "name": "chat-message-avatar-bg",
              "description": ""
            },
            {
              "name": "chat-message-sender-fg",
              "description": ""
            },
            {
              "name": "chat-message-quote-fg",
              "description": ""
            },
            {
              "name": "chat-message-quote-bg",
              "description": ""
            },
            {
              "name": "chat-message-file-fg",
              "description": ""
            },
            {
              "name": "chat-message-file-bg",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Available Types",
            "id": "chat/chat-message-types-showcase.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Chat message component."
        },
        {
          "type": "text",
          "content": "Multiple message types are available through a `type` property, such as\n- text - simple text message\n- file - could be a file preview or a file icon\nif multiple files are provided grouped files are shown\n- quote - quotes a message with specific quote styles\n- map - shows a google map picture by provided [latitude] and [longitude] properties\n"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Available Types",
            "id": "chat/chat-message-types-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Message with attached files:\n```html\n<nb-chat-message\n  type=\"file\"\n  [files]=\"[ { url: '...' } ]\"\n  message=\"Hello world!\">\n</nb-chat-message>\n```\n\nMap message:\n```html\n<nb-chat-message\n  type=\"map\"\n  [latitude]=\"53.914\"\n  [longitude]=\"27.59\"\n  message=\"Here I am\">\n</nb-chat-message>\n```"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "size",
          "shortDescription": "Chat size, available sizes:\nxxsmall, xsmall, small, medium, large, xlarge, xxlarge"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "status",
          "shortDescription": "Chat status color (adds specific styles):\nactive, disabled, primary, info, success, warning, danger"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterViewChecked",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterViewInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbChatComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "chat-font-size",
              "description": ""
            },
            {
              "name": "chat-fg",
              "description": ""
            },
            {
              "name": "chat-bg",
              "description": ""
            },
            {
              "name": "chat-border-radius",
              "description": ""
            },
            {
              "name": "chat-fg-text",
              "description": ""
            },
            {
              "name": "chat-height-xxsmall",
              "description": ""
            },
            {
              "name": "chat-height-xsmall",
              "description": ""
            },
            {
              "name": "chat-height-small",
              "description": ""
            },
            {
              "name": "chat-height-medium",
              "description": ""
            },
            {
              "name": "chat-height-large",
              "description": ""
            },
            {
              "name": "chat-height-xlarge",
              "description": ""
            },
            {
              "name": "chat-height-xxlarge",
              "description": ""
            },
            {
              "name": "chat-border",
              "description": ""
            },
            {
              "name": "chat-padding",
              "description": ""
            },
            {
              "name": "chat-shadow",
              "description": ""
            },
            {
              "name": "chat-separator",
              "description": ""
            },
            {
              "name": "chat-active-bg",
              "description": ""
            },
            {
              "name": "chat-disabled-bg",
              "description": ""
            },
            {
              "name": "chat-disabled-fg",
              "description": ""
            },
            {
              "name": "chat-primary-bg",
              "description": ""
            },
            {
              "name": "chat-info-bg",
              "description": ""
            },
            {
              "name": "chat-success-bg",
              "description": ""
            },
            {
              "name": "chat-warning-bg",
              "description": ""
            },
            {
              "name": "chat-danger-bg",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "chat/chat-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Conversation",
            "id": "chat/chat-conversation-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Chat",
            "id": "chat/chat-colors.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Chat Sizes",
            "id": "chat/chat-sizes.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Conversational UI collection - a set of components for chat-like UI construction."
        },
        {
          "type": "text",
          "content": "Main features:\n- different message types support (text, image, file, file group, map, etc)\n- drag & drop for images and files with preview\n- different UI styles\n- custom action buttons (coming soon)\n\nHere's a complete example build in a bot-like app. Type `help` to be able to receive different message types.\nEnjoy the conversation and the beautiful UI."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "chat/chat-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Basic chat configuration and usage:\n```ts\n<nb-chat title=\"Nebular Conversational UI\">\n      <nb-chat-message *ngFor=\"let msg of messages\"\n                       [type]=\"msg.type\"\n                       [message]=\"msg.text\"\n                       [reply]=\"msg.reply\"\n                       [sender]=\"msg.user.name\"\n                       [date]=\"msg.date\"\n                       [files]=\"msg.files\"\n                       [quote]=\"msg.quote\"\n                       [latitude]=\"msg.latitude\"\n                       [longitude]=\"msg.longitude\"\n                       [avatar]=\"msg.user.avatar\">\n  </nb-chat-message>\n\n  <nb-chat-form (send)=\"sendMessage($event)\" [dropFiles]=\"true\">\n  </nb-chat-form>\n</nb-chat>\n```\n\nThere are three main components:\n```ts\n<nb-chat>\n</nb-chat> // chat container\n\n<nb-chat-form>\n</nb-chat-form> // chat form with drag&drop files feature\n\n<nb-chat-message>\n</nb-chat-message> // chat message, available multiple types\n```\n\nTwo users conversation showcase:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Conversation",
            "id": "chat/chat-conversation-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Chat UI is also available in different colors by specifying a `[status]` input:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Chat",
            "id": "chat/chat-colors.component"
          }
        },
        {
          "type": "text",
          "content": "Also it is possible to configure sizes through `[size]` input:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Chat Sizes",
            "id": "chat/chat-sizes.component"
          }
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbChatOptions",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": []
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "value",
          "shortDescription": "Checkbox value"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "status",
          "shortDescription": "Checkbox status (success, warning, danger)"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onTouched",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "fn",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "registerOnChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "fn",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "registerOnTouched",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "removeFocus",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "val",
              "type": "boolean",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setDisabledState",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "setFocus",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "val",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "writeValue",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbCheckboxComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "checkbox-bg",
              "description": ""
            },
            {
              "name": "checkbox-size",
              "description": ""
            },
            {
              "name": "checkbox-border-size",
              "description": ""
            },
            {
              "name": "checkbox-border-color",
              "description": ""
            },
            {
              "name": "checkbox-checkmark",
              "description": ""
            },
            {
              "name": "checkbox-checked-bg",
              "description": ""
            },
            {
              "name": "checkbox-checked-size",
              "description": ""
            },
            {
              "name": "checkbox-checked-border-size",
              "description": ""
            },
            {
              "name": "checkbox-checked-border-color",
              "description": ""
            },
            {
              "name": "checkbox-checked-checkmark",
              "description": ""
            },
            {
              "name": "checkbox-disabled-bg",
              "description": ""
            },
            {
              "name": "checkbox-disabled-size",
              "description": ""
            },
            {
              "name": "checkbox-disabled-border-size",
              "description": ""
            },
            {
              "name": "checkbox-disabled-border-color",
              "description": ""
            },
            {
              "name": "checkbox-disabled-checkmark",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "checkbox/checkbox-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Checkboxes",
            "id": "checkbox/checkbox-status.component"
          }
        },
        {
          "type": "additional-example",
          "content": {
            "name": "Disabled Checkbox",
            "id": "checkbox/checkbox-disabled.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Styled checkbox component"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "checkbox/checkbox-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Can have one of the following statuses: danger, success or warning"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Checkboxes",
            "id": "checkbox/checkbox-status.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbContextMenuComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "context-menu-fg",
              "description": ""
            },
            {
              "name": "context-menu-active-fg",
              "description": ""
            },
            {
              "name": "context-menu-active-bg",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Context menu component used as content within NbContextMenuDirective."
        }
      ]
    },
    {
      "kind": "directive",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbAdjustment",
          "required": null,
          "name": "nbContextMenuAdjustment",
          "shortDescription": "Container position will be changes automatically based on this strategy if container can't fit view port.\nSet this property to any falsy value if you want to disable automatically adjustment.\nAvailable values: clockwise, counterclockwise."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbPosition",
          "required": null,
          "name": "nbContextMenuPlacement",
          "shortDescription": "Position will be calculated relatively host element based on the position.\nCan be top, right, bottom and left."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "nbContextMenuTag",
          "shortDescription": "Set NbMenu tag, which helps identify menu when working with NbMenuService."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "required": null,
          "name": "nbContextMenu",
          "shortDescription": "Basic menu items, will be passed to the internal NbMenuComponent."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "menuService",
              "type": "NbMenuService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "hostRef",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "positionBuilder",
              "type": "NbPositionBuilderService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlay",
              "type": "NbOverlayService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbContextMenuDirective"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createPositionStrategy",
          "type": [
            "NbAdjustableConnectedPositionStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createTriggerStrategy",
          "type": [
            "NbTriggerStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "hide",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterViewInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "show",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnItemClick",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnPositionChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnTriggers",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "toggle",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "items",
              "type": "NbMenuItem[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "validateItems",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbContextMenuDirective",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "context-menu/context-menu-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Menu item click",
            "id": "context-menu/context-menu-click.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Full featured context menu directive."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "context-menu/context-menu-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Just pass menu items array:\n\n```html\n<button [nbContextMenu]=\"items\"></button>\n...\nitems = [{ title: 'Profile' }, { title: 'Log out' }];\n```\n\nIf you want to handle context menu clicks you have to pass `nbContextMenuTag`\nparam and register to events using NbMenuService.\n`NbContextMenu` renders plain `NbMenu` inside, so\nyou have to work with it just like with `NbMenu` component:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Menu item click",
            "id": "context-menu/context-menu-click.component"
          }
        },
        {
          "type": "text",
          "content": "Context menu has different placements, such as: top, bottom, left and right\nwhich can be used as following:\n\n```html\n<button [nbContextMenu]=\"items\" nbContextMenuPlacement=\"right\"></button>\n```\n\n```ts\nitems = [{ title: 'Profile' }, { title: 'Log out' }];\n```\n\nBy default context menu will try to adjust itself to maximally fit viewport\nand provide the best user experience. It will try to change position of the context menu.\nIf you wanna disable this behaviour just set it falsy value.\n\n```html\n<button [nbContextMenu]=\"items\" nbContextMenuAdjustment=\"counterclockwise\"></button>\n```\n\n```ts\nitems = [{ title: 'Profile' }, { title: 'Log out' }];\n```"
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "boundingMonth",
          "shortDescription": "Defines if we should render previous and next months\nin the current month view."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ComponentRef<NbDatepickerContainerComponent>",
          "required": null,
          "name": "container",
          "shortDescription": "Datepicker container that contains instantiated picker."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "dayCellComponent",
          "shortDescription": "Custom day cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "filter",
          "shortDescription": "Predicate that decides which cells will be disabled."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "format",
          "shortDescription": "Datepicker date format."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "hideOnSelect",
          "shortDescription": "Hide picker when a date or a range is selected, `true` by default"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ElementRef",
          "required": null,
          "name": "hostRef",
          "shortDescription": "HTML input reference to which datepicker connected."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "max",
          "shortDescription": "Maximum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "min",
          "shortDescription": "Minimum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "monthCellComponent",
          "shortDescription": "Custom month cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Subject<T>",
          "required": null,
          "name": "onChange$",
          "shortDescription": "Stream of picker changes. Required to be the subject because picker hides and shows and picker\nchange stream becomes recreated."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Type<P>",
          "required": null,
          "name": "pickerClass",
          "shortDescription": "Calendar component class that has to be instantiated inside overlay."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ComponentRef<any>",
          "required": null,
          "name": "pickerRef",
          "shortDescription": "Reference to the picker instance itself."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbAdjustableConnectedPositionStrategy",
          "required": null,
          "name": "positionStrategy",
          "shortDescription": "Positioning strategy used by overlay."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "queue",
          "shortDescription": "Queue contains the last value that was applied to the picker when it was hidden.\nThis value will be passed to the picker as soon as it shown."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbOverlayRef",
          "required": null,
          "name": "ref",
          "shortDescription": "Overlay reference object."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarSize",
          "required": null,
          "name": "size",
          "shortDescription": "Size of the calendar and entire components.\nCan be 'medium' which is default or 'large'."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarViewMode",
          "required": null,
          "name": "startView",
          "shortDescription": "Defines starting view for calendar."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "visibleDate",
          "shortDescription": "Depending on this date a particular month is selected in the calendar"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "yearCellComponent",
          "shortDescription": "Custom year cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "any",
          "required": null,
          "name": "picker",
          "shortDescription": "Returns picker instance."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Observable",
          "required": null,
          "name": "valueChange",
          "shortDescription": "Stream of picker value changes."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "positionBuilder",
              "type": "NbPositionBuilderService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlay",
              "type": "NbOverlayService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbBasePicker"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "hostRef",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "attach",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Datepicker knows nothing about host html input element.\nSo, attach method attaches datepicker to the host input element."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createPositionStrategy",
          "type": [
            "NbAdjustableConnectedPositionStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createTriggerStrategy",
          "type": [
            "NbTriggerStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getValidatorConfig",
          "type": [
            "NbPickerValidatorConfig<T>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "hide",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "instantiatePicker",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "patchWithInputs",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "shouldHide",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "show",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnPositionChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnTriggers",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnValueChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Subscribes on picker value changes and emit data through this.onChange$ subject."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "writeQueue",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbBasePicker",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "The `NbBasePicker` component concentrates overlay manipulation logic."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "boundingMonth",
          "shortDescription": "Defines if we should render previous and next months\nin the current month view."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ComponentRef<NbDatepickerContainerComponent>",
          "required": null,
          "name": "container",
          "shortDescription": "Datepicker container that contains instantiated picker."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "dayCellComponent",
          "shortDescription": "Custom day cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "filter",
          "shortDescription": "Predicate that decides which cells will be disabled."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "format",
          "shortDescription": "Datepicker date format."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "hideOnSelect",
          "shortDescription": "Hide picker when a date or a range is selected, `true` by default"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ElementRef",
          "required": null,
          "name": "hostRef",
          "shortDescription": "HTML input reference to which datepicker connected."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "max",
          "shortDescription": "Maximum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "min",
          "shortDescription": "Minimum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "monthCellComponent",
          "shortDescription": "Custom month cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Subject<D>",
          "required": null,
          "name": "onChange$",
          "shortDescription": "Stream of picker changes. Required to be the subject because picker hides and shows and picker\nchange stream becomes recreated."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ComponentRef<any>",
          "required": null,
          "name": "pickerRef",
          "shortDescription": "Reference to the picker instance itself."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbAdjustableConnectedPositionStrategy",
          "required": null,
          "name": "positionStrategy",
          "shortDescription": "Positioning strategy used by overlay."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "queue",
          "shortDescription": "Queue contains the last value that was applied to the picker when it was hidden.\nThis value will be passed to the picker as soon as it shown."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbOverlayRef",
          "required": null,
          "name": "ref",
          "shortDescription": "Overlay reference object."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarSize",
          "required": null,
          "name": "size",
          "shortDescription": "Size of the calendar and entire components.\nCan be 'medium' which is default or 'large'."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarViewMode",
          "required": null,
          "name": "startView",
          "shortDescription": "Defines starting view for calendar."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "visibleDate",
          "shortDescription": "Depending on this date a particular month is selected in the calendar"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "yearCellComponent",
          "shortDescription": "Custom year cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "D",
          "required": null,
          "name": "date",
          "shortDescription": "Date which will be rendered as selected."
        },
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter",
          "required": null,
          "name": "dateChange",
          "shortDescription": "Emits date when selected."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "any",
          "required": null,
          "name": "picker",
          "shortDescription": "Returns picker instance."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Observable",
          "required": null,
          "name": "valueChange",
          "shortDescription": "Stream of picker value changes."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "positionBuilder",
              "type": "NbPositionBuilderService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlay",
              "type": "NbOverlayService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbDatepickerComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "hostRef",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "attach",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Datepicker knows nothing about host html input element.\nSo, attach method attaches datepicker to the host input element."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createPositionStrategy",
          "type": [
            "NbAdjustableConnectedPositionStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createTriggerStrategy",
          "type": [
            "NbTriggerStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getValidatorConfig",
          "type": [
            "NbPickerValidatorConfig<D>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "hide",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "instantiatePicker",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "patchWithInputs",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "shouldHide",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "show",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnPositionChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnTriggers",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnValueChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Subscribes on picker value changes and emit data through this.onChange$ subject."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "writeQueue",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbDatepickerComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "The DatePicker components itself.\nProvides a proxy to `NbCalendar` options as well as custom picker options."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "boundingMonth",
          "shortDescription": "Defines if we should render previous and next months\nin the current month view."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ComponentRef<NbDatepickerContainerComponent>",
          "required": null,
          "name": "container",
          "shortDescription": "Datepicker container that contains instantiated picker."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "dayCellComponent",
          "shortDescription": "Custom day cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "filter",
          "shortDescription": "Predicate that decides which cells will be disabled."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "format",
          "shortDescription": "Datepicker date format."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "hideOnSelect",
          "shortDescription": "Hide picker when a date or a range is selected, `true` by default"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ElementRef",
          "required": null,
          "name": "hostRef",
          "shortDescription": "HTML input reference to which datepicker connected."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarRange<D>",
          "required": null,
          "name": "max",
          "shortDescription": "Maximum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarRange<D>",
          "required": null,
          "name": "min",
          "shortDescription": "Minimum available date for selection."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "monthCellComponent",
          "shortDescription": "Custom month cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Subject<NbCalendarRange>",
          "required": null,
          "name": "onChange$",
          "shortDescription": "Stream of picker changes. Required to be the subject because picker hides and shows and picker\nchange stream becomes recreated."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ComponentRef<any>",
          "required": null,
          "name": "pickerRef",
          "shortDescription": "Reference to the picker instance itself."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbAdjustableConnectedPositionStrategy",
          "required": null,
          "name": "positionStrategy",
          "shortDescription": "Positioning strategy used by overlay."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarRange<D>",
          "required": null,
          "name": "queue",
          "shortDescription": "Queue contains the last value that was applied to the picker when it was hidden.\nThis value will be passed to the picker as soon as it shown."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbOverlayRef",
          "required": null,
          "name": "ref",
          "shortDescription": "Overlay reference object."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarSize",
          "required": null,
          "name": "size",
          "shortDescription": "Size of the calendar and entire components.\nCan be 'medium' which is default or 'large'."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarViewMode",
          "required": null,
          "name": "startView",
          "shortDescription": "Defines starting view for calendar."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "visibleDate",
          "shortDescription": "Depending on this date a particular month is selected in the calendar"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Type<NbCalendarCell>",
          "required": null,
          "name": "yearCellComponent",
          "shortDescription": "Custom year cell component. Have to implement `NbCalendarCell` interface."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "any",
          "required": null,
          "name": "picker",
          "shortDescription": "Returns picker instance."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbCalendarRange",
          "required": null,
          "name": "range",
          "shortDescription": "Range which will be rendered as selected."
        },
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter",
          "required": null,
          "name": "rangeChange",
          "shortDescription": "Emits range when start selected and emits again when end selected."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Observable",
          "required": null,
          "name": "valueChange",
          "shortDescription": "Stream of picker value changes."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "positionBuilder",
              "type": "NbPositionBuilderService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlay",
              "type": "NbOverlayService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbRangepickerComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "hostRef",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "attach",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Datepicker knows nothing about host html input element.\nSo, attach method attaches datepicker to the host input element."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createPositionStrategy",
          "type": [
            "NbAdjustableConnectedPositionStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createTriggerStrategy",
          "type": [
            "NbTriggerStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getValidatorConfig",
          "type": [
            "NbPickerValidatorConfig<NbCalendarRange>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "hide",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "instantiatePicker",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "patchWithInputs",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "shouldHide",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "show",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnPositionChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnTriggers",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnValueChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Subscribes on picker value changes and emit data through this.onChange$ subject."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "writeQueue",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbRangepickerComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "The RangeDatePicker components itself.\nProvides a proxy to `NbCalendarRange` options as well as custom picker options."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "format",
          "shortDescription": "HTML input element date format."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "hostRef",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "attach",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "Attaches datepicker to the native input element."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getValidatorConfig",
          "type": [
            "NbPickerValidatorConfig<T>"
          ],
          "isStatic": false,
          "shortDescription": "Returns validator configuration based on the input properties."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "hide",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "shouldHide",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "show",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbDatepicker",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Datepicker is an control that can pick any values anyway.\nIt has to be bound to the datepicker directive through nbDatepicker input."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Type<any>",
          "required": null,
          "name": "picker",
          "shortDescription": "Picker component class."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "format",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "format",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "Format date according to the format."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "format",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isValid",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Validates date string according to the passed format."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "format",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "parse",
          "type": [
            "D"
          ],
          "isStatic": false,
          "shortDescription": "Parse date string according to the format."
        }
      ],
      "name": "NbDatepickerAdapter",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "The `NbDatepickerAdapter` instances provide way how to parse, format and validate\ndifferent date types."
        }
      ]
    },
    {
      "kind": "directive",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbDatepickerAdapter<D>",
          "required": null,
          "name": "datepickerAdapter",
          "shortDescription": "Datepicker adapter."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbDatepicker<D>",
          "required": null,
          "name": "picker",
          "shortDescription": "Datepicker instance."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ValidatorFn",
          "required": null,
          "name": "validator",
          "shortDescription": "Form control validators will be called in validators context, so, we need to bind them."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "HTMLInputElement",
          "required": null,
          "name": "input",
          "shortDescription": "Returns html input element."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "inputValue",
          "shortDescription": "Returns host input value."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbDatepicker",
          "required": null,
          "name": "nbDatepicker",
          "shortDescription": "Provides datepicker component."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "datepickerAdapters",
              "type": "NbDatepickerAdapter[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "hostRef",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "dateService",
              "type": "NbDateService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbDatepickerDirective"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "chooseDatepickerAdapter",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Chooses datepicker adapter based on passed picker component."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "filterValidator",
          "type": [
            null
          ],
          "isStatic": false,
          "shortDescription": "Validates passed value satisfy the filter."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "handleInputChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Parses input value and write if it isn't null."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "hidePicker",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Hides picker, focuses the input"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "maxValidator",
          "type": [
            null
          ],
          "isStatic": false,
          "shortDescription": "Validates passed value is smaller than max."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "minValidator",
          "type": [
            null
          ],
          "isStatic": false,
          "shortDescription": "Validates passed value is greater than min."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "noDatepickerAdapterProvided",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Validates if no datepicker adapter provided."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "parseInputValue",
          "type": [
            null
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "parseValidator",
          "type": [
            null
          ],
          "isStatic": false,
          "shortDescription": "Validates that we can parse value correctly."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "fn",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "registerOnChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "fn",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "registerOnTouched",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setDisabledState",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "setupPicker",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Attaches picker to the host input element and subscribes on value changes."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnInputChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "validate",
          "type": [
            null
          ],
          "isStatic": false,
          "shortDescription": "Form control validation based on picker validator config."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "writeInput",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "writePicker",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "writeValue",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Writes value in picker and html input element."
        }
      ],
      "name": "NbDatepickerDirective",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "datepicker-fg",
              "description": ""
            },
            {
              "name": "datepicker-bg",
              "description": ""
            },
            {
              "name": "datepicker-border",
              "description": ""
            },
            {
              "name": "datepicker-border-radius",
              "description": ""
            },
            {
              "name": "datepicker-shadow",
              "description": ""
            },
            {
              "name": "datepicker-arrow-size",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "datepicker/datepicker-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Range showcase",
            "id": "datepicker/rangepicker-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Forms",
            "id": "datepicker/datepicker-forms.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Validation",
            "id": "datepicker/datepicker-validation.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "The `NbDatepickerDirective` is form control that gives you ability to select dates and ranges. The datepicker\nis shown when input receives a `focus` event."
        },
        {
          "type": "text",
          "content": "```html\n<input [nbDatepicker]=\"datepicker\">\n<nb-datepicker #datepicker></nb-datepicker>\n```\n"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "datepicker/datepicker-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "If you want to use range selection, you have to use `NbRangepickerComponent` instead:\n\n```html\n<input [nbDatepicker]=\"rangepicker\">\n<nb-rangepicker #rangepicker></nb-rangepicker>\n```\n\nBoth range and date pickers support all parameters as calendar, so, check `NbCalendarComponent` for additional\ninfo."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Range showcase",
            "id": "datepicker/rangepicker-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Datepicker is the form control so it can be bound with angular forms through ngModel and form controls."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Forms",
            "id": "datepicker/datepicker-forms.component"
          }
        },
        {
          "type": "text",
          "content": "`NbDatepickerDirective` may be validated using `min` and `max` dates passed to the datepicker.\nAnd `filter` predicate that receives date object and has to return a boolean value."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Validation",
            "id": "datepicker/datepicker-validation.component"
          }
        },
        {
          "type": "text",
          "content": "The `NbDatepickerComponent` supports date formatting:\n\n```html\n<input [nbDatepicker]=\"datepicker\">\n<nb-datepicker #datepicker format=\"MM\\dd\\yyyy\"></nb-datepicker>\n```\n\n## Formatting Issue\n\nBy default, datepicker uses angulars `LOCALE_ID` token for localization and `DatePipe` for dates formatting.\nAnd native `Date.parse(...)` for dates parsing. But native `Date.parse` function doesn't support formats.\nTo provide custom formatting you have to use one of the following packages:\n\n- `@nebular/moment` - provides moment date adapter that uses moment for date objects. This means datepicker than\nwill operate only moment date objects. If you want to use it you have to install it: `npm i @nebular/moment`, and\nimport `NbMomentDateModule` from this package.\n\n- `@nebular/date-fns` - adapter for popular date-fns library. This way is preferred if you need only date formatting.\nBecause date-fns is treeshakable, tiny and operates native date objects. If you want to use it you have to\ninstall it: `npm i @nebular/date-fns`, and import `NbDateFnsDateModule` from this package."
        }
      ]
    },
    {
      "kind": "interface",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "filter",
          "shortDescription": "Predicate that determines is value available for picking."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "max",
          "shortDescription": "Maximum date available in picker."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "min",
          "shortDescription": "Minimum date available in picker."
        }
      ],
      "methods": [],
      "name": "NbPickerValidatorConfig",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Validators config that will be used by form control to perform proper validation."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "autoFocus",
          "shortDescription": "Focuses dialog automatically after open if true."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "backdropClass",
          "shortDescription": "Class that'll be assigned to the backdrop element."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "closeOnBackdropClick",
          "shortDescription": "If true then mouse clicks by backdrop will close a dialog."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "closeOnEsc",
          "shortDescription": "If true then escape press will close a dialog."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "hasBackdrop",
          "shortDescription": "If true than overlay will render backdrop under a dialog."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "hasScroll",
          "shortDescription": "Disables scroll on content under dialog if true and does nothing otherwise."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ViewContainerRef",
          "required": null,
          "name": "viewContainerRef",
          "shortDescription": "Where the attached component should live in Angular's *logical* component tree.\nThis affects what is available for injection and the change detection order for the\ncomponent instantiated inside of the dialog. This does not affect where the dialog\ncontent will be rendered."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "Partial",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbDialogConfig"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbDialogConfig",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Describes all available options that may be passed to the NbDialogService."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "NbDialogConfig",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "elementRef",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "focusTrapFactory",
              "type": "NbFocusTrapFactoryService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbDialogContainerComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "portal",
              "type": "NbComponentPortal",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "attachComponentPortal",
          "type": [
            "ComponentRef<T>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "portal",
              "type": "NbTemplatePortal",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "attachTemplatePortal",
          "type": [
            "EmbeddedViewRef<C>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbDialogContainerComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Container component for each dialog.\nAll the dialogs will be attached to it.\n// TODO add animations"
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Observable<MouseEvent>",
          "required": null,
          "name": "onBackdropClick",
          "shortDescription": "Stream of backdrop click events."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "overlayRef",
              "type": "NbOverlayRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbDialogRef"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "res",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "close",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Hides dialog."
        }
      ],
      "name": "NbDialogRef",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "The `NbDialogRef` helps to manipulate dialog after it was created.\nThe dialog can be dismissed by using `close` method of the dialogRef.\nYou can access rendered component as `content` property of the dialogRef.\n`onBackdropClick` streams click events on the backdrop of the dialog."
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "globalConfig",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "positionBuilder",
              "type": "NbPositionBuilderService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlay",
              "type": "NbOverlayService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "injector",
              "type": "Injector",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbDialogService"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "NbDialogConfig",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "content",
              "type": "Type",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "dialogRef",
              "type": "NbDialogRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createComponentPortal",
          "type": [
            "NbComponentPortal"
          ],
          "isStatic": false,
          "shortDescription": "We're creating portal with custom injector provided through config or using global injector.\nThis approach provides us capability inject `NbDialogRef` in dialog component."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "NbDialogConfig",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlayRef",
              "type": "NbOverlayRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createContainer",
          "type": [
            "NbDialogContainerComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "NbDialogConfig",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "content",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "container",
              "type": "NbDialogContainerComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "dialogRef",
              "type": "NbDialogRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createContent",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "NbDialogConfig",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createInjector",
          "type": [
            "Injector"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "NbDialogConfig",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createOverlay",
          "type": [
            "NbOverlayRef"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createPositionStrategy",
          "type": [
            "NbGlobalPositionStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "hasScroll",
              "type": "boolean",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createScrollStrategy",
          "type": [
            "NbScrollStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "NbDialogConfig",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "content",
              "type": "TemplateRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "dialogRef",
              "type": "NbDialogRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "createTemplatePortal",
          "type": [
            "NbTemplatePortal"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "content",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "userConfig",
              "type": "Partial",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "open",
          "type": [
            "NbDialogRef<T>"
          ],
          "isStatic": false,
          "shortDescription": "Opens new instance of the dialog, may receive optional config."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "NbDialogConfig",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlayRef",
              "type": "NbOverlayRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "dialogRef",
              "type": "NbDialogRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "registerCloseListeners",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbDialogService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "dialog/dialog-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Template ref",
            "id": "dialog/dialog-template.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Result",
            "id": "dialog/dialog-result.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Backdrop",
            "id": "dialog/dialog-has-backdrop.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Backdrop click",
            "id": "dialog/dialog-backdrop-click.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Escape hit",
            "id": "dialog/dialog-esc.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Scroll",
            "id": "dialog/dialog-scroll.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Auto focus",
            "id": "dialog/dialog-auto-focus.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "The `NbDialogService` helps to open dialogs."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "dialog/dialog-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "A new dialog is opened by calling the `open` method with a component to be loaded and an optional configuration.\n`open` method will return `NbDialogRef` that can be used for the further manipulations.\n\n```ts\nconst dialogRef = this.dialogService.open(MyDialogComponent, { ... });\n```\n\n`NbDialogRef` gives capability access reference to the rendered dialog component,\ndestroy dialog and some other options described below.\n\nAlso, you can inject `NbDialogRef` in dialog component.\n\n```ts\nthis.dialogService.open(MyDialogComponent, { ... });\n\n// my-dialog.component.ts\nconstructor(protected dialogRef: NbDialogRef) {\n}\n\nclose() {\n  this.dialogRef.close();\n}\n```\n\nInstead of component you can create dialog from TemplateRef:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Template ref",
            "id": "dialog/dialog-template.component"
          }
        },
        {
          "type": "text",
          "content": "The dialog may return result through `NbDialogRef`. Calling component can receive this result with `onClose`\nstream of `NbDialogRef`."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Result",
            "id": "dialog/dialog-result.component"
          }
        },
        {
          "type": "text",
          "content": "### Configuration\n\nAs we mentioned above, `open` method of the `NbDialogService` may receive optional configuration options.\nAlso, you can provide global dialogs configuration through `NbDialogModule.forRoot({ ... })`.\n\nThis config may contain the following:\n\n`context` - both, template and component may receive data through `config.context` property.\nFor components, this data will be assigned through inputs.\nFor templates, you can access it inside template as $implicit.\n\n```ts\nthis.dialogService.open(template, { context: 'pass data in template' });\n```\n\n```html\n<ng-template let-some-additional-data>\n  {{ some-additional-data }}\n<ng-template/>\n```\n\n`hasBackdrop` - determines is service have to render backdrop under the dialog.\nDefault is true."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Backdrop",
            "id": "dialog/dialog-has-backdrop.component"
          }
        },
        {
          "type": "text",
          "content": "`closeOnBackdropClick` - close dialog on backdrop click if true.\nDefault is true."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Backdrop click",
            "id": "dialog/dialog-backdrop-click.component"
          }
        },
        {
          "type": "text",
          "content": "`closeOnEsc` - close dialog on escape button on the keyboard.\nDefault is true."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Escape hit",
            "id": "dialog/dialog-esc.component"
          }
        },
        {
          "type": "text",
          "content": "`hasScroll` - Disables scroll on content under dialog if true and does nothing otherwise.\nDefault is false.\nPlease, open dialogs in the separate window and try to scroll."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Scroll",
            "id": "dialog/dialog-scroll.component"
          }
        },
        {
          "type": "text",
          "content": "`autoFocus` - Focuses dialog automatically after open if true. It's useful to prevent misclicks on\ntrigger elements and opening multiple dialogs.\nDefault is true.\n\nAs you can see, if you open dialog with auto focus dialog will focus first focusable element\nor just blur previously focused automatically.\nOtherwise, without auto focus, the focus will stay on the previously focused element.\nPlease, open dialogs in the separate window and try to click on the button without focus\nand then hit space any times. Multiple same dialogs will be opened."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Auto focus",
            "id": "dialog/dialog-auto-focus.component"
          }
        }
      ]
    },
    {
      "kind": "directive",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "shape",
          "shortDescription": "Field shapes: `rectangle`, `round`, `semi-round`"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "status",
          "shortDescription": "Field status (adds specific styles):\n`info`, `success`, `warning`, `danger`"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "any",
          "required": null,
          "name": "fullWidth",
          "shortDescription": "If set element will fill container"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "fieldSize",
          "shortDescription": "Field size, available sizes:\n`small`, `medium`, `large`"
        }
      ],
      "methods": [],
      "name": "NbInputDirective",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "form-control-bg",
              "description": ""
            },
            {
              "name": "form-control-border-width",
              "description": ""
            },
            {
              "name": "form-control-border-type",
              "description": ""
            },
            {
              "name": "form-control-border-color",
              "description": ""
            },
            {
              "name": "form-control-text-primary-color",
              "description": ""
            },
            {
              "name": "form-control-focus-bg",
              "description": ""
            },
            {
              "name": "form-control-selected-border-color",
              "description": ""
            },
            {
              "name": "form-control-placeholder-font-size",
              "description": ""
            },
            {
              "name": "form-control-placeholder-color",
              "description": ""
            },
            {
              "name": "form-control-font-size",
              "description": ""
            },
            {
              "name": "form-control-padding",
              "description": ""
            },
            {
              "name": "form-control-font-size-sm",
              "description": ""
            },
            {
              "name": "form-control-padding-sm",
              "description": ""
            },
            {
              "name": "form-control-font-size-lg",
              "description": ""
            },
            {
              "name": "form-control-padding-lg",
              "description": ""
            },
            {
              "name": "form-control-border-radius",
              "description": ""
            },
            {
              "name": "form-control-semi-round-border-radius",
              "description": ""
            },
            {
              "name": "form-control-round-border-radius",
              "description": ""
            },
            {
              "name": "form-control-info-border-color",
              "description": ""
            },
            {
              "name": "form-control-success-border-color",
              "description": ""
            },
            {
              "name": "form-control-warning-border-color",
              "description": ""
            },
            {
              "name": "form-control-danger-border-color",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "input/input-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Input Colors",
            "id": "input/input-colors.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Input Sizes",
            "id": "input/input-sizes.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Input Shapes",
            "id": "input/input-shapes.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Input Elements",
            "id": "input/input-types.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Full width inputs",
            "id": "input/input-full-width.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Basic input directive."
        },
        {
          "type": "text",
          "content": "```html\n<input nbInput></input>\n```\n\nDefault input size is `medium`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "input/input-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Inputs are available in multiple colors using `status` property:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Input Colors",
            "id": "input/input-colors.component"
          }
        },
        {
          "type": "text",
          "content": "There are three input sizes:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Input Sizes",
            "id": "input/input-sizes.component"
          }
        },
        {
          "type": "text",
          "content": "Inputs available in different shapes, which could be combined with the other properties:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Input Shapes",
            "id": "input/input-shapes.component"
          }
        },
        {
          "type": "text",
          "content": "`nbInput` could be applied to the following selectors - `input`, `textarea`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Input Elements",
            "id": "input/input-types.component"
          }
        },
        {
          "type": "text",
          "content": "You can add `fullWidth` attribute to make element fill container:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Full width inputs",
            "id": "input/input-full-width.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "left",
          "shortDescription": "Move the column to the very left position in the layout."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "start",
          "shortDescription": "Make columnt first in the layout."
        }
      ],
      "methods": [],
      "name": "NbLayoutColumnComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Column Left",
            "id": "layout/layout-column-left.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "A container component which determines a content position inside of the layout.\nThe layout could contain unlimited columns (not including the sidebars)."
        },
        {
          "type": "text",
          "content": "By default the columns are ordered from the left to the right,\nbut it's also possible to overwrite this behavior by setting a `left` attribute to the column,\nmoving it to the very first position:\n"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Column Left",
            "id": "layout/layout-column-left.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "center",
          "shortDescription": "Defines whether the layout columns will be centered after some width"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "restoreScrollTop",
          "shortDescription": "Restores scroll to the top of the page after navigation"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "windowMode",
          "shortDescription": "Defines whether the layout enters a 'window' mode, when the layout content (including sidebars and fixed header)\nbecomes centered by width with a margin from the top of the screen, like a floating window.\nAutomatically enables `withScroll` mode, as in the window mode scroll must be inside the layout and cannot be on\nwindow. (TODO: check this)"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "withScroll",
          "shortDescription": "Defines whether to move the scrollbars to layout or leave it at the body level.\nAutomatically set to true when `windowMode` is enabled."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "themeService",
              "type": "NbThemeService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "spinnerService",
              "type": "NbSpinnerService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "elementRef",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "renderer",
              "type": "Renderer2",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "window",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "document",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "platformId",
              "type": "Object",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "layoutDirectionService",
              "type": "NbLayoutDirectionService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "scrollService",
              "type": "NbLayoutScrollService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "rulerService",
              "type": "NbLayoutRulerService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "scrollTop",
              "type": "NbRestoreScrollTopHelper",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlayContainer",
              "type": "NbOverlayContainerAdapter",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbLayoutComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getDimensions",
          "type": [
            "NbLayoutDimensions"
          ],
          "isStatic": false,
          "shortDescription": "Returns scroll and client height/width",
          "description": "Depending on the current scroll mode (`withScroll=true`) returns sizes from the body element\nor from the `.scrollable-container`"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getScrollPosition",
          "type": [
            "NbScrollPosition"
          ],
          "isStatic": false,
          "shortDescription": "Returns scroll position of current scroll container.",
          "description": "If `withScroll` = true, returns scroll position of the `.scrollable-container` element,\notherwise - of the scrollable element of the window (which may be different depending of a browser)\n"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterViewInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "event",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "onResize",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "$event",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "onScroll",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "registerAsOverlayContainer",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "x",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "y",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "scroll",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "unregisterAsOverlayContainer",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbLayoutComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "layout-font-family",
              "description": ""
            },
            {
              "name": "layout-font-size",
              "description": ""
            },
            {
              "name": "layout-line-height",
              "description": ""
            },
            {
              "name": "layout-fg",
              "description": ""
            },
            {
              "name": "layout-bg",
              "description": ""
            },
            {
              "name": "layout-min-height",
              "description": ""
            },
            {
              "name": "layout-content-width",
              "description": ""
            },
            {
              "name": "layout-window-mode-min-width",
              "description": ""
            },
            {
              "name": "layout-window-mode-max-width",
              "description": "window mode only, after this value layout turns into a floating window"
            },
            {
              "name": "layout-window-mode-bg",
              "description": "window mode only, background"
            },
            {
              "name": "layout-window-mode-padding-top",
              "description": "window mode only, max padding from top"
            },
            {
              "name": "layout-window-shadow",
              "description": "window mode shadow"
            },
            {
              "name": "layout-padding",
              "description": ""
            },
            {
              "name": "layout-medium-padding",
              "description": ""
            },
            {
              "name": "layout-small-padding",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "layout/layout-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Layout With Footer",
            "id": "layout/layout-w-footer.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Layout container component.\nWhen using with Nebular Theme System it is required that all child components should be placed inside."
        },
        {
          "type": "text",
          "content": "Basic example of two column layout with header:\n"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "layout/layout-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Can contain the following components inside:\n\n```html\n<nb-layout>\n <nb-layout-header></nb-layout-header>\n <nb-layout-footer></nb-layout-column>\n <nb-layout-column></nb-layout-column>\n <nb-sidebar></nb-sidebar>\n</nb-layout>\n```\n\nBy default the layout fills up the whole view-port.\nThe window scrollbars are disabled on the body and moved inside of the nb-layout, so that the scrollbars\nwon't mess with the fixed nb-header.\n\nThe child components are projected into a flexible layout structure allowing to adjust the layout behavior\nbased on the settings provided.\n\nThe layout content (columns) becomes centered when the window width is more than\nthe value specified in the theme variable `layout-content-width`.\n\nThe layout also contains the area on the very top (the first child of the nb-layout), which could be used\nto dynamically append some components like modals or spinners/loaders\nso that they are located on top of the elements hierarchy.\nMore details are under the `ThemeService` section.\n\nThe layout component is also responsible for changing application themes.\nIt listens to the `themeChange` event and change a theme CSS class appended to body.\nBased on the class appended, specific CSS-theme is applied to the application.\nMore details of the Theme System could be found here [Enabling Theme System](#/docs/concepts/theme-system)\n\nA simple layout with footer:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Layout With Footer",
            "id": "layout/layout-w-footer.component"
          }
        },
        {
          "type": "text",
          "content": "It is possible to ask the layout to center the columns (notice: we added a `center` attribute\nto the layout:\n\n```html\n<nb-layout center>\n  <nb-layout-header>Awesome Company</nb-layout-header>\n\n  <nb-layout-column>\n    Hello World!\n  </nb-layout-column>\n\n  <nb-layout-footer>Contact us</nb-layout-footer>\n</nb-layout>\n```"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "fixed",
          "shortDescription": "Makes the footer sticky to the bottom of the window."
        }
      ],
      "methods": [],
      "name": "NbLayoutFooterComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "footer-height",
              "description": ""
            },
            {
              "name": "footer-padding",
              "description": ""
            },
            {
              "name": "footer-fg",
              "description": ""
            },
            {
              "name": "footer-bg",
              "description": ""
            },
            {
              "name": "footer-separator",
              "description": ""
            },
            {
              "name": "footer-shadow",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Page footer.\nLocated under the nb-layout content (specifically, under the columns).\nCould be made `fixed`, becoming sticky to the bottom of the view port (window)."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "fixed",
          "shortDescription": "Makes the header sticky to the top of the nb-layout."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "subheader",
          "shortDescription": "Places header on a side of the sidebar, and not above.\nDisables fixed mode for this header and remove a shadow from the sidebar."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "layout",
              "type": "NbLayoutComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbLayoutHeaderComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbLayoutHeaderComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "header-font-family",
              "description": ""
            },
            {
              "name": "header-line-height",
              "description": ""
            },
            {
              "name": "header-fg",
              "description": ""
            },
            {
              "name": "header-bg",
              "description": ""
            },
            {
              "name": "header-height",
              "description": ""
            },
            {
              "name": "header-padding",
              "description": ""
            },
            {
              "name": "header-shadow",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Fixed Header",
            "id": "layout/layout-fixed-header.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Subheader",
            "id": "layout/layout-sidebar-subheader.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Subheader",
            "id": "layout/layout-subheader.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Page header component.\nLocated on top of the page above the layout columns and sidebars.\nCould be made `fixed` by setting the corresponding property. In the fixed mode the header becomes\nsticky to the top of the nb-layout (to of the page). Here's an example:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Fixed Header",
            "id": "layout/layout-fixed-header.component"
          }
        },
        {
          "type": "text",
          "content": "In a pair with sidebar it is possible to setup a configuration when header is placed on a side of the sidebar\nand not on top of it. To achieve this simply put a `subheader` property to the header like this:\n```html\n<nb-layout-header subheader></nb-layout-header>\n```"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Subheader",
            "id": "layout/layout-sidebar-subheader.component"
          }
        },
        {
          "type": "text",
          "content": "Note that in such configuration sidebar shadow is removed and header cannot be make `fixed`.\n\nSame way you can put both `fixed` and `clipped` headers adding creating a sub-header for your app:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Subheader",
            "id": "layout/layout-subheader.component"
          }
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "router",
              "type": "Router",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbRestoreScrollTopHelper"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "prev",
              "type": "NavigationEnd",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "current",
              "type": "NavigationEnd",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "pageChanged",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "shouldRestore",
          "type": [
            "Observable<boolean>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbRestoreScrollTopHelper",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "This service determines whether we should scroll the layout back to top.\nThis occurs when the page is changed, so when current url PATH is not equal to the previous one."
        },
        {
          "type": "text",
          "content": " TODO: this is most likely a temporary solutions as recently Angular introduces ViewportScroll\n and scroll restoration process\n"
        }
      ]
    },
    {
      "kind": "directive",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<Object>",
          "required": null,
          "name": "bottomThreshold",
          "shortDescription": "Emits when distance between list bottom and current scroll position is less than threshold."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "threshold",
          "shortDescription": "Threshold after which event load more event will be emited.\nIn pixels."
        },
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<Object>",
          "required": null,
          "name": "topThreshold",
          "shortDescription": "Emits when distance between list top and current scroll position is less than threshold."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "any",
          "required": null,
          "name": "listenWindowScroll",
          "shortDescription": "By default component observes list scroll position.\nIf set to `true`, component will observe position of page scroll instead."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "elementRef",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "scrollService",
              "type": "NbLayoutScrollService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "dimensionsService",
              "type": "NbLayoutRulerService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbInfiniteListDirective"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "__namedParameters",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "checkPosition",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getContainerDimensions",
          "type": [
            "Observable<NbScrollableContainerDimentions>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "inSyncWithDom",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterViewInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onElementScroll",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbInfiniteListDirective",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Simple infinite list",
            "id": "infinite-list/infinite-list-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Scroll modes",
            "id": "infinite-list/infinite-list-scroll-modes.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Infinite list with pager",
            "id": "infinite-list/infinite-news-list.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Infinite list with placeholders at the top",
            "id": "infinite-list/infinite-list-placeholders.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Infinite List Directive"
        },
        {
          "type": "text",
          "content": "```html\n <nb-list nbInfiniteList [threshold]=\"500\" (bottomThreshold)=\"loadNext()\">\n   <nb-list-item *ngFor=\"let item of items\"></nb-list-item>\n </nb-list>\n```\n"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Simple infinite list",
            "id": "infinite-list/infinite-list-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Directive will notify when list scrolled up or down to given a threshold.\nBy default it listen to scroll of list on which applied, but also can be set to listen to window scroll."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Scroll modes",
            "id": "infinite-list/infinite-list-scroll-modes.component"
          }
        },
        {
          "type": "text",
          "content": "To improve UX of infinite lists, it's better to keep current page in url,\nso user able to return to the last viewed page or to share a link to this page.\n`nbListPageTracker` directive will help you to know, what page user currently viewing.\nJust put it on a list, set page size and it will calculate page that currently in viewport.\nYou can [open the example](example/infinite-list/infinite-news-list.component)\nin a new tab to check out this feature."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Infinite list with pager",
            "id": "infinite-list/infinite-news-list.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Infinite list with placeholders at the top",
            "id": "infinite-list/infinite-list-placeholders.component"
          }
        }
      ]
    },
    {
      "kind": "directive",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<number>",
          "required": null,
          "name": "pageChange",
          "shortDescription": "Emits when another page become visible."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "pageSize",
          "shortDescription": "Items per page."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "startPage",
          "shortDescription": "Page to start counting with."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbListPageTrackerDirective"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "entries",
              "type": "IntersectionObserverEntry[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "checkForPageChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "element",
              "type": "Element",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "elementIndex",
          "type": [
            "number"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "entries",
              "type": "IntersectionObserverEntry[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "findMostVisiblePage",
          "type": [
            null
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterViewInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "observeItems",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbListPageTrackerDirective",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "List pager directive"
        },
        {
          "type": "text",
          "content": "Directive allows you to determine page of currently viewing items.\n\n"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "role",
          "shortDescription": "Role attribute value"
        }
      ],
      "methods": [],
      "name": "NbListComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "list-item-border-color",
              "description": ""
            },
            {
              "name": "list-item-padding",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Simple list",
            "id": "list/simple-list-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Users list",
            "id": "list/users-list-showcase.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "List is a container component that wraps `nb-list-item` component."
        },
        {
          "type": "text",
          "content": "Basic example:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Simple list",
            "id": "list/simple-list-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "`nb-list-item` accepts arbitrary content, so you can create list of any components.\n\nList of users:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Users list",
            "id": "list/users-list-showcase.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "role",
          "shortDescription": "Role attribute value"
        }
      ],
      "methods": [],
      "name": "NbListItemComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "List item component is a grouping component that accepts arbitrary content.\nIt should be direct child of `nb-list` componet."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbMenuItem[]",
          "required": null,
          "name": "items",
          "shortDescription": "List of menu items."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "tag",
          "shortDescription": "Tags a menu with some ID, can be later used in the menu service\nto determine which menu triggered the action, if multiple menus exist on the page."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "autoCollapse",
          "shortDescription": "Collapse all opened submenus on the toggle event\nDefault value is \"false\""
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "inverse",
          "shortDescription": "Makes colors inverse based on current theme"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "window",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "menuInternalService",
              "type": "NbMenuInternalService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "router",
              "type": "Router",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbMenuComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "collapseAll",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "tag",
              "type": "string",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "compareTag",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "items",
              "type": "NbMenuItem[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getHomeItem",
          "type": [
            "NbMenuItem"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "items",
              "type": "NbMenuItem[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getSelectedItem",
          "type": [
            "NbMenuItem"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "navigateHome",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterViewInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "data",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "onAddItem",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "item",
              "type": "NbMenuItem",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "onHoverItem",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "item",
              "type": "NbMenuItem",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "onItemClick",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "item",
              "type": "NbMenuItem",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "onSelectItem",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "item",
              "type": "NbMenuItem",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "onToggleSubMenu",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbMenuComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "menu-font-family",
              "description": ""
            },
            {
              "name": "menu-font-size",
              "description": ""
            },
            {
              "name": "menu-font-weight",
              "description": ""
            },
            {
              "name": "menu-fg",
              "description": ""
            },
            {
              "name": "menu-bg",
              "description": ""
            },
            {
              "name": "menu-active-fg",
              "description": ""
            },
            {
              "name": "menu-active-bg",
              "description": ""
            },
            {
              "name": "menu-active-font-weight",
              "description": ""
            },
            {
              "name": "menu-submenu-bg",
              "description": ""
            },
            {
              "name": "menu-submenu-fg",
              "description": ""
            },
            {
              "name": "menu-submenu-active-fg",
              "description": ""
            },
            {
              "name": "menu-submenu-active-bg",
              "description": ""
            },
            {
              "name": "menu-submenu-active-border-color",
              "description": ""
            },
            {
              "name": "menu-submenu-active-shadow",
              "description": ""
            },
            {
              "name": "menu-submenu-hover-fg",
              "description": ""
            },
            {
              "name": "menu-submenu-hover-bg",
              "description": ""
            },
            {
              "name": "menu-submenu-item-border-width",
              "description": ""
            },
            {
              "name": "menu-submenu-item-border-radius",
              "description": ""
            },
            {
              "name": "menu-submenu-item-padding",
              "description": ""
            },
            {
              "name": "menu-submenu-item-container-padding",
              "description": ""
            },
            {
              "name": "menu-submenu-padding",
              "description": ""
            },
            {
              "name": "menu-group-font-weight",
              "description": ""
            },
            {
              "name": "menu-group-font-size",
              "description": ""
            },
            {
              "name": "menu-group-fg",
              "description": ""
            },
            {
              "name": "menu-group-padding",
              "description": ""
            },
            {
              "name": "menu-item-padding",
              "description": ""
            },
            {
              "name": "menu-item-separator",
              "description": ""
            },
            {
              "name": "menu-icon-font-size",
              "description": ""
            },
            {
              "name": "menu-icon-margin",
              "description": ""
            },
            {
              "name": "menu-icon-color",
              "description": ""
            },
            {
              "name": "menu-icon-active-color",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "menu/menu-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Two Levels",
            "id": "menu/menu-children.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Vertical menu component."
        },
        {
          "type": "text",
          "content": "Accepts a list of menu items and renders them accordingly. Supports multi-level menus.\n\nBasic example"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "menu/menu-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "```ts\n// ...\nitems: NbMenuItem[] = [\n {\n   title: home,\n   link: '/'\n },\n {\n   title: dashboard,\n   link: 'dashboard'\n }\n];\n// ...\n<nb-menu [items]=\"items\"></nb-menu>\n```\n\nTwo-level menu example"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Two Levels",
            "id": "menu/menu-children.component"
          }
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbMenuItem[]",
          "required": null,
          "name": "children",
          "shortDescription": "Children items"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "expanded",
          "shortDescription": "Expanded by defaul"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "group",
          "shortDescription": "Whether the item is just a group (non-clickable)"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "hidden",
          "shortDescription": "Hidden Item"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "home",
          "shortDescription": "Where this is a home item"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "icon",
          "shortDescription": "Icon class name"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "link",
          "shortDescription": "Item relative link (for routerLink)"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "pathMatch",
          "shortDescription": "Item is selected when partly or fully equal to the current url"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Params",
          "required": null,
          "name": "queryParams",
          "shortDescription": "Map of query parameters"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "subMenuHeight",
          "shortDescription": "Children items height"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "target",
          "shortDescription": "HTML Link target"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "title",
          "shortDescription": "Item Title"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "url",
          "shortDescription": "Item URL (absolute)"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "item",
              "type": "NbMenuItem",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "getParents",
          "type": [
            "NbMenuItem[]"
          ],
          "isStatic": true
        },
        {
          "examples": [],
          "params": [
            {
              "name": "item",
              "type": "NbMenuItem",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "possibleChild",
              "type": "NbMenuItem",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isParent",
          "type": [
            "boolean"
          ],
          "isStatic": true,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbMenuItem",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Menu Item options"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "items",
              "type": "NbMenuItem[]",
              "required": null
            },
            {
              "name": "tag",
              "type": "string",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "addItems",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Add items to the end of the menu items list"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "tag",
              "type": "string",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "collapseAll",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Collapses all menu items"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "tag",
              "type": "string",
              "required": null
            }
          ],
          "platform": null,
          "name": "getSelectedItem",
          "type": [
            "Observable<NbMenuBag>"
          ],
          "isStatic": false,
          "shortDescription": "Returns currently selected item. Won't subscribe to the future events."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "tag",
              "type": "string",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "navigateHome",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Navigate to the home menu item"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onItemClick",
          "type": [
            "Observable<NbMenuBag>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onItemHover",
          "type": [
            "Observable<NbMenuBag>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onItemSelect",
          "type": [
            "Observable<NbMenuBag>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onSubmenuToggle",
          "type": [
            "Observable<NbMenuBag>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbMenuService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Menu Service. Allows you to listen to menu events, or to interact with a menu."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbPopoverComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "popover-fg",
              "description": ""
            },
            {
              "name": "popover-bg",
              "description": ""
            },
            {
              "name": "popover-border",
              "description": ""
            },
            {
              "name": "popover-shadow",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Overlay container.\nRenders provided content inside."
        }
      ]
    },
    {
      "kind": "directive",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbAdjustment",
          "required": null,
          "name": "nbPopoverAdjustment",
          "shortDescription": "Container position will be changes automatically based on this strategy if container can't fit view port.\nSet this property to any falsy value if you want to disable automatically adjustment.\nAvailable values: clockwise, counterclockwise."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbOverlayContent",
          "required": null,
          "name": "nbPopover",
          "shortDescription": "Popover content which will be rendered in NbArrowedOverlayContainerComponent.\nAvailable content: template ref, component and any primitive."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "Object",
          "required": null,
          "name": "nbPopoverContext",
          "shortDescription": "Container content context. Will be applied to the rendered component."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbTrigger",
          "required": null,
          "name": "nbPopoverMode",
          "shortDescription": "Describes when the container will be shown.\nAvailable options: click, hover and hint"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbPosition",
          "required": null,
          "name": "nbPopoverPlacement",
          "shortDescription": "Position will be calculated relatively host element based on the position.\nCan be top, right, bottom, left, start or end."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "hostRef",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "positionBuilder",
              "type": "NbPositionBuilderService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlay",
              "type": "NbOverlayService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbPopoverDirective"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createPositionStrategy",
          "type": [
            "NbAdjustableConnectedPositionStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createTriggerStrategy",
          "type": [
            "NbTriggerStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "hide",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterViewInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "show",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnPositionChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnTriggers",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "toggle",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbPopoverDirective",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "popover/popover-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Placements",
            "id": "popover/popover-placements.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Available Modes",
            "id": "popover/popover-modes.component.html"
          }
        },
        {
          "type": "additional-example",
          "content": {
            "name": "Template Ref",
            "id": "popover/popover-template-ref.component"
          }
        },
        {
          "type": "additional-example",
          "content": {
            "name": "Custom Component",
            "id": "popover/popover-custom-component.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Powerful popover directive, which provides the best UX for your users."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "popover/popover-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Popover can accept different content such as:\nTemplateRef\n\n```html\n<button [nbPopover]=\"templateRef\"></button>\n<ng-template #templateRef>\n  <span>Hello, Popover!</span>\n</ng-template>\n```\n\nCustom components\n\n```html\n<button [nbPopover]=\"MyPopoverComponent\"></button>\n```\n\nBoth custom components and templateRef popovers can receive *contentContext* property\nthat will be passed to the content props.\n\nPrimitive types\n\n```html\n<button nbPopover=\"Hello, Popover!\"></button>\n```\n\nPopover has different placements, such as: top, bottom, left, right, start and end\nwhich can be used as following:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Placements",
            "id": "popover/popover-placements.component"
          }
        },
        {
          "type": "text",
          "content": "By default popover will try to adjust itself to maximally fit viewport\nand provide the best user experience. It will try to change position of the popover container.\nIf you wanna disable this behaviour just set it falsy value.\n\n```html\n<button nbPopover=\"Hello, Popover!\" [nbPopoverAdjust]=\"false\"></button>\n```\n\nAlso popover has some different modes which provides capability show$ and hide$ popover in different ways:\n\n- Click mode popover shows when a user clicking on the host element and hides when the user clicks\nsomewhere on the document except popover.\n- Hint mode provides capability show$ popover when the user hovers on the host element\nand hide$ popover when user hovers out of the host.\n- Hover mode works like hint mode with one exception - when the user moves mouse from host element to\nthe container element popover will not be hidden."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Available Modes",
            "id": "popover/popover-modes.component.html"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "displayValue",
          "shortDescription": "Displays value inside progress bar"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "size",
          "shortDescription": "Progress bar size (xs, sm, lg, xlg)"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "status",
          "shortDescription": "Progress bar background (primary, info success, warning, danger)"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "value",
          "shortDescription": "Progress bar value in percent (0 - 100)"
        }
      ],
      "methods": [],
      "name": "NbProgressBarComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "progress-bar-height-xlg",
              "description": ""
            },
            {
              "name": "progress-bar-height-lg",
              "description": ""
            },
            {
              "name": "progress-bar-height",
              "description": ""
            },
            {
              "name": "progress-bar-height-sm",
              "description": ""
            },
            {
              "name": "progress-bar-height-xs",
              "description": ""
            },
            {
              "name": "progress-bar-font-size-xlg",
              "description": ""
            },
            {
              "name": "progress-bar-font-size-lg",
              "description": ""
            },
            {
              "name": "progress-bar-font-size",
              "description": ""
            },
            {
              "name": "progress-bar-font-size-sm",
              "description": ""
            },
            {
              "name": "progress-bar-font-size-xs",
              "description": ""
            },
            {
              "name": "progress-bar-radius",
              "description": ""
            },
            {
              "name": "progress-bar-bg-color",
              "description": ""
            },
            {
              "name": "progress-bar-font-color",
              "description": ""
            },
            {
              "name": "progress-bar-font-weight",
              "description": ""
            },
            {
              "name": "progress-bar-default-bg-color",
              "description": ""
            },
            {
              "name": "progress-bar-primary-bg-color",
              "description": ""
            },
            {
              "name": "progress-bar-success-bg-color",
              "description": ""
            },
            {
              "name": "progress-bar-info-bg-color",
              "description": ""
            },
            {
              "name": "progress-bar-warning-bg-color",
              "description": ""
            },
            {
              "name": "progress-bar-danger-bg-color",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Progress bar",
            "id": "progress-bar/progress-bar-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Progress bar status",
            "id": "progress-bar/progress-bar-status.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Progress bar size",
            "id": "progress-bar/progress-bar-size.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Progress bar value",
            "id": "progress-bar/progress-bar-value.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Progress bar interactive",
            "id": "progress-bar/progress-bar-interactive.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Progress Bar is a component for indicating progress."
        },
        {
          "type": "text",
          "content": "Simple usage:\n\n```html\n<nb-progress-bar [value]=\"50\"></nb-progress-bar>\n```\n\nProgress bar accepts property `value` in range 0-100"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Progress bar",
            "id": "progress-bar/progress-bar-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Progress bar background could be configured by providing a `status` property:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Progress bar status",
            "id": "progress-bar/progress-bar-status.component"
          }
        },
        {
          "type": "text",
          "content": "Progress bar size (height and font-size) could be configured by providing a `size` property:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Progress bar size",
            "id": "progress-bar/progress-bar-size.component"
          }
        },
        {
          "type": "text",
          "content": "`displayValue` property shows current value inside progress bar. It's also possible to add custom text inside:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Progress bar value",
            "id": "progress-bar/progress-bar-value.component"
          }
        },
        {
          "type": "text",
          "content": "Progress bar supports `width` and `background-color` transition:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Progress bar interactive",
            "id": "progress-bar/progress-bar-interactive.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<any>",
          "required": null,
          "name": "changeTab",
          "shortDescription": "Emits when tab is selected"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "any[]",
          "required": null,
          "name": "tabs",
          "shortDescription": "Tabs configuration"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "fullWidth",
          "shortDescription": "Take full width of a parent"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "router",
              "type": "Router",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbRouteTabsetComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "tab",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "selectTab",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbRouteTabsetComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "route-tabs-font-family",
              "description": ""
            },
            {
              "name": "route-tabs-font-size",
              "description": ""
            },
            {
              "name": "route-tabs-active-bg",
              "description": ""
            },
            {
              "name": "route-tabs-active-font-weight",
              "description": ""
            },
            {
              "name": "route-tabs-padding",
              "description": ""
            },
            {
              "name": "route-tabs-header-bg",
              "description": ""
            },
            {
              "name": "route-tabs-separator",
              "description": ""
            },
            {
              "name": "route-tabs-fg",
              "description": ""
            },
            {
              "name": "route-tabs-fg-heading",
              "description": ""
            },
            {
              "name": "route-tabs-bg",
              "description": ""
            },
            {
              "name": "route-tabs-selected",
              "description": ""
            },
            {
              "name": "route-tabs-icon-only-max-width",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Route Tabset",
            "id": "tabset/route-tabset-showcase.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Route tabset components.\nRenders tabs inside of a router-outlet."
        },
        {
          "type": "text",
          "content": "basic usage example\n\n```ts\n tabs = [\n {\n   title: 'Route tab #1',\n   route: '/pages/description',\n   icon: 'nb-home',\n   responsive: true, // hide title before `route-tabs-icon-only-max-width` value\n },\n {\n   title: 'Route tab #2',\n   route: '/pages/images',\n   }\n ];\n\n <nb-route-tabset [tabs]=\"tabs\"></nb-route-tabset>\n```\n"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Route Tabset",
            "id": "tabset/route-tabset-showcase.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "hint",
          "shortDescription": "Hint showing under the input field to improve user experience"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "placeholder",
          "shortDescription": "Search input placeholder"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "tag",
          "shortDescription": "Tags a search with some ID, can be later used in the search service\nto determine which search component triggered the action, if multiple searches exist on the page."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "type",
          "shortDescription": "Search design type, available types are\nmodal-zoomin, rotate-layout, modal-move, curtain, column-curtain, modal-drop, modal-half"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "searchService",
              "type": "NbSearchService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "themeService",
              "type": "NbThemeService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "router",
              "type": "Router",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlayService",
              "type": "NbOverlayService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "changeDetector",
              "type": "ChangeDetectorRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbSearchComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "hideSearch",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "openSearch",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "removeLayoutClasses",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "term",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "search",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbSearchComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "search-btn-open-fg",
              "description": ""
            },
            {
              "name": "search-btn-close-fg",
              "description": ""
            },
            {
              "name": "search-bg",
              "description": ""
            },
            {
              "name": "search-bg-secondary",
              "description": ""
            },
            {
              "name": "search-text",
              "description": ""
            },
            {
              "name": "search-info",
              "description": ""
            },
            {
              "name": "search-dash",
              "description": ""
            },
            {
              "name": "search-placeholder",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "search/search-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Search Event",
            "id": "search/search-event.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Beautiful full-page search control."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "search/search-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Basic setup:\n\n```ts\n <nb-search type=\"rotate-layout\"></nb-search>\n```\n\nSeveral animation types are available:\nmodal-zoomin, rotate-layout, modal-move, curtain, column-curtain, modal-drop, modal-half\n\nIt is also possible to handle search event using `NbSearchService`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Search Event",
            "id": "search/search-event.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "emitClose",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "focusInput",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterViewInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "__namedParameters",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "ngOnChanges",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "term",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "submitSearch",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbSearchFieldComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "search-field-component is used under the hood by nb-search component\ncan't be used itself"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "searchType",
              "type": "string",
              "required": null
            },
            {
              "name": "tag",
              "type": "string",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "activateSearch",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Activate (open) search component"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "searchType",
              "type": "string",
              "required": null
            },
            {
              "name": "tag",
              "type": "string",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "deactivateSearch",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Deactibate (close) search component"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onSearchActivate",
          "type": [
            "Observable<{searchType: string; tag?: string}>\n"
          ],
          "isStatic": false,
          "shortDescription": "Subscribe to 'activate' event"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onSearchDeactivate",
          "type": [
            "Observable<{searchType: string; tag?: string}>\n"
          ],
          "isStatic": false,
          "shortDescription": "Subscribe to 'deactivate' event"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onSearchSubmit",
          "type": [
            "Observable<{term: string; tag?: string}>\n"
          ],
          "isStatic": false,
          "shortDescription": "Subscribe to 'submit' event (when submit button clicked)"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "term",
              "type": "string",
              "required": null
            },
            {
              "name": "tag",
              "type": "string",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "submitSearch",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Trigger search submit"
        }
      ],
      "name": "NbSearchService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Search component service, connects your code to a page-level search component."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "any",
          "required": null,
          "name": "customLabel",
          "shortDescription": "Custom select label, will be rendered instead of default enumeration with coma."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "disabled",
          "shortDescription": "Disables the select"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "fullWidth",
          "shortDescription": "If set element will fill its container"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "hero",
          "shortDescription": "Adds `hero` styles"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "QueryList<NbOptionComponent>",
          "required": null,
          "name": "options",
          "shortDescription": "List of `NbOptionComponent`'s components passed as content.\nTODO maybe it would be better provide wrapper"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "outline",
          "shortDescription": "Adds `outline` styles"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbPosition",
          "required": null,
          "name": "overlayPosition",
          "shortDescription": "Current overlay position because of we have to toggle overlayPosition\nin [ngClass] direction and this directive can use only string."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "placeholder",
          "shortDescription": "Renders select placeholder if nothing selected."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbPortalDirective",
          "required": null,
          "name": "portal",
          "shortDescription": "NbCard with options content."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "queue",
          "shortDescription": "If a user assigns value before content nb-options's rendered the value will be putted in this variable.\nAnd then applied after content rendered.\nOnly the last value will be applied."
        },
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<undefined>",
          "required": null,
          "name": "selectedChange",
          "shortDescription": "Will be emitted when selected value changes."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Observable<NbOptionComponent>",
          "required": null,
          "name": "selectionChange",
          "shortDescription": "Stream of events that will fire when one of the options fire selectionChange event."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbOptionComponent[]",
          "required": null,
          "name": "selectionModel",
          "shortDescription": "List of selected options."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "shape",
          "shortDescription": "Select shapes: `rectangle`, `round`, `semi-round`"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "size",
          "shortDescription": "Select size, available sizes:\n`xxsmall`, `xsmall`, `small`, `medium`, `large`"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "status",
          "shortDescription": "Select status (adds specific styles):\n`primary`, `info`, `success`, `warning`, `danger`"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "hostWidth",
          "shortDescription": "Returns width of the select button."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "isHidden",
          "shortDescription": "Determines is select hidden."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "isOpened",
          "shortDescription": "Determines is select opened."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "any",
          "required": null,
          "name": "selectionView",
          "shortDescription": "Content rendered in the label."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "multiple",
          "shortDescription": "Gives capability just write `multiple` over the element."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "required": null,
          "name": "selected",
          "shortDescription": "Accepts selected item or array of selected items."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlay",
              "type": "NbOverlayService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "hostRef",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "positionBuilder",
              "type": "NbPositionBuilderService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "cd",
              "type": "ChangeDetectorRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbSelectComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "cleanSelection",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createOverlay",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createPositionStrategy",
          "type": [
            "NbAdjustableConnectedPositionStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createScrollStrategy",
          "type": [
            "NbScrollStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "selected",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "emitSelected",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Propagate selected value."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getContainer",
          "type": [
            "ComponentRef<any>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "option",
              "type": "NbOptionComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "handleMultipleSelect",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Select for multiple options."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "option",
              "type": "NbOptionComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "handleSelect",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Selects option or clear all selected options if value is null."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "option",
              "type": "NbOptionComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "handleSingleSelect",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Select single option."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "hide",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterContentInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterViewInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Function passed through control value accessor to propagate changes."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "fn",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "registerOnChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "fn",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "registerOnTouched",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "reset",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Deselect all selected options."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "option",
              "type": "NbOptionComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "selectOption",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Determines how to select option as multiple or single."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "selectValue",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Selects value."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setDisabledState",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setSelection",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Set selected value in model."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "show",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnPositionChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnSelectionChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnTriggers",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "value",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "writeValue",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbSelectComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "select-border-width",
              "description": ""
            },
            {
              "name": "select-max-height",
              "description": ""
            },
            {
              "name": "select-bg",
              "description": ""
            },
            {
              "name": "select-checkbox-color",
              "description": ""
            },
            {
              "name": "select-checkmark-color",
              "description": ""
            },
            {
              "name": "select-option-disabled-bg",
              "description": ""
            },
            {
              "name": "select-option-disabled-opacity",
              "description": ""
            },
            {
              "name": "select-option-padding",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "select/select-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Multiple",
            "id": "select/select-multiple.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Clean selection",
            "id": "select/select-clean.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Select form binding",
            "id": "select/select-form.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Grouping",
            "id": "select/select-groups.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Placeholder",
            "id": "select/select-placeholder.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Disabled select",
            "id": "select/select-disabled.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Custom label",
            "id": "select/select-label.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Select statuses",
            "id": "select/select-status.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Select sizes",
            "id": "select/select-sizes.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Outline select",
            "id": "select/select-outline.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Select colors",
            "id": "select/select-hero.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Select shapes",
            "id": "select/select-shapes.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "The `NbSelectComponent` provides a capability to select one of the passed items."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "select/select-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "If you want to use it as the multi-select control you have to mark it as `multiple`.\nIn this case, `nb-select` will work only with arrays - accept arrays and propagate arrays."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Multiple",
            "id": "select/select-multiple.component"
          }
        },
        {
          "type": "text",
          "content": "Items without values will clean selection."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Clean selection",
            "id": "select/select-clean.component"
          }
        },
        {
          "type": "text",
          "content": "Select may be bounded using `selected` input:\n\n```html\n<nb-select [(selected)]=\"selected\"></nb-selected>\n```\n\nOr you can bind control with form controls or ngModel:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Select form binding",
            "id": "select/select-form.component"
          }
        },
        {
          "type": "text",
          "content": "Options in the select may be grouped using `nb-option-group` component."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Grouping",
            "id": "select/select-groups.component"
          }
        },
        {
          "type": "text",
          "content": "Select may have a placeholder that will be shown when nothing selected:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Placeholder",
            "id": "select/select-placeholder.component"
          }
        },
        {
          "type": "text",
          "content": "You can disable select, options and whole groups."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Disabled select",
            "id": "select/select-disabled.component"
          }
        },
        {
          "type": "text",
          "content": "Also, the custom label may be provided in select.\nThis custom label will be used for instead placeholder when something selected."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Custom label",
            "id": "select/select-label.component"
          }
        },
        {
          "type": "text",
          "content": "Default `nb-select` size is `medium` and status color is `primary`.\nSelect is available in multiple colors using `status` property:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Select statuses",
            "id": "select/select-status.component"
          }
        },
        {
          "type": "text",
          "content": "There are three select sizes:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Select sizes",
            "id": "select/select-sizes.component"
          }
        },
        {
          "type": "text",
          "content": "And two additional style types - `outline`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Outline select",
            "id": "select/select-outline.component"
          }
        },
        {
          "type": "text",
          "content": "and `hero`:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Select colors",
            "id": "select/select-hero.component"
          }
        },
        {
          "type": "text",
          "content": "Select is available in different shapes, that could be combined with the other properties:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Select shapes",
            "id": "select/select-shapes.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string[]",
          "required": null,
          "name": "collapsedBreakpoints",
          "shortDescription": "Controls on which screen sizes sidebar should be switched to collapsed state.\nWorks only when responsive mode is on.\nDefault values are `['xs', 'is']`."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string[]",
          "required": null,
          "name": "compactedBreakpoints",
          "shortDescription": "Controls on which screen sizes sidebar should be switched to compacted state.\nWorks only when responsive mode is on.\nDefault values are `['xs', 'is', 'sm', 'md', 'lg']`."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "tag",
          "shortDescription": "Tags a sidebar with some ID, can be later used in the sidebar service\nto determine which sidebar triggered the action, if multiple sidebars exist on the page."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "containerFixed",
          "shortDescription": "Makes sidebar container fixed"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "end",
          "shortDescription": "Places sidebar on the end edge of layout"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "fixed",
          "shortDescription": "Makes sidebar fixed (shown above the layout content)"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "left",
          "shortDescription": "Places sidebar on the left side"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "responsive",
          "shortDescription": "Makes sidebar listen to media query events and change its behaviour"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "right",
          "shortDescription": "Places sidebar on the right side"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "start",
          "shortDescription": "Places sidebar on the start edge of layout"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "state",
          "shortDescription": "Initial sidebar state, `expanded`|`collapsed`|`compacted`"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "sidebarService",
              "type": "NbSidebarService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "themeService",
              "type": "NbThemeService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "element",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbSidebarComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "collapse",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Collapses the sidebar"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "compact",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Compacts the sidebar (minimizes)"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "expand",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Expands the sidebar"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "changes",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "ngOnChanges",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "event",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "onClick",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onMediaQueryChanges",
          "type": [
            "Subscription"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "responsiveEnabled",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "compact",
              "type": "boolean",
              "required": null,
              "description": "If true, then sidebar state will be changed between expanded & compacted,\notherwise - between expanded & collapsed. False by default.\n\nToggle sidebar state\n\n```ts\nthis.sidebar.toggle(true);\n```\n"
            }
          ],
          "platform": null,
          "name": "toggle",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Toggles sidebar state (expanded|collapsed|compacted)"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "enabled",
              "type": "boolean",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "toggleResponsive",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbSidebarComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "sidebar-font-size",
              "description": "Sidebar content font size"
            },
            {
              "name": "sidebar-line-height",
              "description": "Sidebar content line height"
            },
            {
              "name": "sidebar-fg",
              "description": "Foreground color"
            },
            {
              "name": "sidebar-bg",
              "description": "Background color"
            },
            {
              "name": "sidebar-height",
              "description": "Content height"
            },
            {
              "name": "sidebar-width",
              "description": "Expanded width"
            },
            {
              "name": "sidebar-width-compact",
              "description": "Compacted width"
            },
            {
              "name": "sidebar-padding",
              "description": "Sidebar content padding"
            },
            {
              "name": "sidebar-header-height",
              "description": "Sidebar header height"
            },
            {
              "name": "sidebar-footer-height",
              "description": "Sidebar footer height"
            },
            {
              "name": "sidebar-shadow",
              "description": "Sidebar container shadow"
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "sidebar/sidebar-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Compacted Sidebar",
            "id": "sidebar/sidebar-compacted.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Subheader",
            "id": "layout/layout-sidebar-subheader.component"
          }
        },
        {
          "type": "additional-example",
          "content": {
            "name": "Right Sidebar",
            "id": "sidebar/sidebar-right.component"
          }
        },
        {
          "type": "additional-example",
          "content": {
            "name": "Fixed Sidebar",
            "id": "sidebar/sidebar-fixed.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Layout sidebar component."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "sidebar/sidebar-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Sidebar can be placed on the left or the right side of the layout,\nor on start/end position of layout (depends on document direction, left to right or right to left)\nIt can be fixed (shown above the content) or can push the layout when opened.\n\nThere are three states - `expanded`, `collapsed`, `compacted`.\nBy default sidebar content is fixed and saves its position while the page is being scrolled.\n\nCompacted sidebar example:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Compacted Sidebar",
            "id": "sidebar/sidebar-compacted.component"
          }
        },
        {
          "type": "text",
          "content": "Sidebar also supports a `responsive` behavior, listening to window size change and changing its size respectably.\n\nIn a pair with header it is possible to setup a configuration when header is placed on a side of the sidebar\nand not on top of it. To achieve this simply put a `subheader` property to the header like this:\n```html\n<nb-layout-header subheader></nb-layout-header>\n```"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Subheader",
            "id": "layout/layout-sidebar-subheader.component"
          }
        },
        {
          "type": "text",
          "content": "Note that in such configuration sidebar shadow is removed and header cannot be make `fixed`."
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbSidebarFooterComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Sidebar footer container."
        },
        {
          "type": "text",
          "content": "Placeholder which contains a sidebar footer content,\nplaced at the very bottom of the sidebar outside of the scroll area.\n"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbSidebarHeaderComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Sidebar header container."
        },
        {
          "type": "text",
          "content": "Placeholder which contains a sidebar header content,\nplaced at the very top of the sidebar outside of the scroll area.\n"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "tag",
              "type": "string",
              "required": null,
              "description": "If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\nto specify which sidebar you want to control\n"
            }
          ],
          "platform": null,
          "name": "collapse",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Collapses a sidebar"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "tag",
              "type": "string",
              "required": null,
              "description": "If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\nto specify which sidebar you want to control\n"
            }
          ],
          "platform": null,
          "name": "expand",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Expands a sidebar"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onCollapse",
          "type": [
            "Observable<{ tag: string }>\n"
          ],
          "isStatic": false,
          "shortDescription": "Subscribe to collapse evens"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onExpand",
          "type": [
            "Observable<{ tag: string }>\n"
          ],
          "isStatic": false,
          "shortDescription": "Subscribe to expand events"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onToggle",
          "type": [
            "Observable<{ compact: boolean, tag: string }>\n"
          ],
          "isStatic": false,
          "shortDescription": "Subscribe to toggle events"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "compact",
              "type": "boolean",
              "required": null
            },
            {
              "name": "tag",
              "type": "string",
              "required": null,
              "description": "If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\nto specify which sidebar you want to control\n"
            }
          ],
          "platform": null,
          "name": "toggle",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Toggle a sidebar"
        }
      ],
      "name": "NbSidebarService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Sidebar State",
            "id": "sidebar/sidebar-toggle.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Sidebar service."
        },
        {
          "type": "text",
          "content": "Root module service to control the sidebar from any part of the app.\n\nAllows you to change sidebar state dynamically from any part of the app:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Sidebar State",
            "id": "sidebar/sidebar-toggle.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "message",
          "shortDescription": "Loading text that is shown near the icon"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "size",
          "shortDescription": "Spiiner size, available sizes:\nxxsmall, xsmall, small, medium, large, xlarge, xxlarge"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "status",
          "shortDescription": "Spiiner status (adds specific styles):\nactive, disabled, primary, info, success, warning, danger"
        }
      ],
      "methods": [],
      "name": "NbSpinnerComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Styled spinner component"
        }
      ]
    },
    {
      "kind": "directive",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "nbSpinnerMessage",
          "shortDescription": "Spinner message shown next to the icon"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "nbSpinnerSize",
          "shortDescription": "Spinner size, available sizes: xxsmall, xsmall, small, medium, large, xlarge, xxlarge"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "nbSpinnerStatus",
          "shortDescription": "Spinner status color active, disabled, primary, info, success, warning, danger"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "nbSpinner",
          "shortDescription": "Directive value - show or hide spinner"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "directiveView",
              "type": "ViewContainerRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "componentFactoryResolver",
              "type": "ComponentFactoryResolver",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "renderer",
              "type": "Renderer2",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "directiveElement",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbSpinnerDirective"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "hide",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "instance",
              "type": "NbSpinnerComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "setInstanceInputs",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "show",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbSpinnerDirective",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Spinner Showcase",
            "id": "spinner/spinner-card.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Spinner Colors",
            "id": "spinner/spinner-colors.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Spinner Sizes",
            "id": "spinner/spinner-sizes.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Buttons with spinner",
            "id": "spinner/spinner-button.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Spinner in tabs",
            "id": "spinner/spinner-tabs.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Styled spinner directive"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Spinner Showcase",
            "id": "spinner/spinner-card.component"
          }
        },
        {
          "type": "text",
          "content": "```ts\n<nb-card [nbSpinner]=\"loading\" nbSpinnerStatus=\"danger\">\n  <nb-card-body>Card Content</nb-card-body>\n</nb-card>\n```\n\nCould be colored using `status` property"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Spinner Colors",
            "id": "spinner/spinner-colors.component"
          }
        },
        {
          "type": "text",
          "content": "Available in different sizes with `size` property:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Spinner Sizes",
            "id": "spinner/spinner-sizes.component"
          }
        },
        {
          "type": "text",
          "content": "It is also possible to place it into the button:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Buttons with spinner",
            "id": "spinner/spinner-button.component"
          }
        },
        {
          "type": "text",
          "content": "Or tabs:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Spinner in tabs",
            "id": "spinner/spinner-tabs.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "TemplateRef<any>",
          "required": null,
          "name": "content",
          "shortDescription": "Step content"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "false",
          "required": null,
          "name": "hidden",
          "shortDescription": "Whether step will be displayed in wizard"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "",
          "required": null,
          "name": "label",
          "shortDescription": "Step label"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "AbstractControl",
          "required": null,
          "name": "stepControl",
          "shortDescription": "Top level abstract control of the step"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "completed",
          "shortDescription": "Whether step is marked as completed."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "isLabelTemplate",
          "shortDescription": "Check that label is a TemplateRef."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "stepper",
              "type": "NbStepperComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbStepComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "reset",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Reset step and stepControl state"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "select",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Mark step as selected"
        }
      ],
      "name": "NbStepComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Component intended to be used within  the `<nb-stepper>` component.\nContainer for a step"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "orientation",
          "shortDescription": "Stepper orientation - `horizontal`|`vertical`"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "selected",
          "shortDescription": "Selected step component"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "selectedIndex",
          "shortDescription": "Selected step index"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "step",
              "type": "NbStepComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isStepSelected",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "index",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isStepValid",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "next",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Navigate to next step"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "previous",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Navigate to previous step"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "reset",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Reset stepper and stepControls to initial state"
        }
      ],
      "name": "NbStepperComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "stepper-index-size",
              "description": ""
            },
            {
              "name": "stepper-label-font-size",
              "description": ""
            },
            {
              "name": "stepper-label-font-weight",
              "description": ""
            },
            {
              "name": "stepper-accent-color",
              "description": ""
            },
            {
              "name": "stepper-completed-fg",
              "description": ""
            },
            {
              "name": "stepper-fg",
              "description": ""
            },
            {
              "name": "stepper-completed-icon-size",
              "description": ""
            },
            {
              "name": "stepper-completed-icon-weight",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "stepper/stepper-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Validation",
            "id": "stepper/stepper-validation.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Vertical",
            "id": "stepper/stepper-vertical.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Stepper component"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "stepper/stepper-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "If step label is string you can pass it as `label` attribute. Otherwise ng-template should be used:\n```html\n// ...\n<nb-stepper orientation=\"horizontal\">\n  <nb-step label=\"step number one\">\n      // ... step content here\n  <nb-step>\n  <nb-step label=\"stepLabel\">\n      <ng-template #stepLabel>\n          <div>\n              step number two\n          </div>\n      </ng-template>\n      // ... step content here\n  <nb-step>\n</nb-stepper>\n```\nSpecify `[stepControl]=\"form\"` and user can navigates only if submit previous step's form.\n```html\n// ...\n<nb-stepper  orientation=\"horizontal\">\n  <nb-step label=\"step number one\" [stepControl]=\"form\">\n    <form [formGroup]=\"form\">\n      // ...\n    </form>\n  <nb-step>\n   // ...\n</nb-stepper>\n```"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Validation",
            "id": "stepper/stepper-validation.component"
          }
        },
        {
          "type": "text",
          "content": "Stepper component has two layout options - `vertical` & `horizontal`"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Vertical",
            "id": "stepper/stepper-vertical.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "badgePosition",
          "shortDescription": "Badge position.\nCan be set to any class or to one of predefined positions:\n'top left', 'top right', 'bottom left', 'bottom right',\n'top start', 'top end', 'bottom start', 'bottom end'"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "badgeStatus",
          "shortDescription": "Badge status (adds specific styles):\n'primary', 'info', 'success', 'warning', 'danger'"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "badgeText",
          "shortDescription": "Badge text to display"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "tabIcon",
          "shortDescription": "Tab icon"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "tabTitle",
          "shortDescription": "Tab title"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "active",
          "shortDescription": "Specifies active tab"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "lazyLoad",
          "shortDescription": "Lazy load content before tab selection\nTODO: rename, as lazy is by default, and this is more `instant load`"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "responsive",
          "shortDescription": "Show only icons when width is smaller than `tabs-icon-only-max-width`"
        }
      ],
      "methods": [],
      "name": "NbTabComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Specific tab container."
        },
        {
          "type": "text",
          "content": "```ts\n<nb-tab tabTitle=\"Users\"\n  badgeText=\"99+\"\n  badgeStatus=\"danger\">\n  <p>List of <strong>users</strong>.</p>\n</nb-tab>\n```\n"
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "output",
          "platform": null,
          "isStatic": false,
          "type": "EventEmitter<any>",
          "required": null,
          "name": "changeTab",
          "shortDescription": "Emits when tab is selected"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "routeParam",
          "shortDescription": "If specified - tabset listens to this parameter and selects corresponding tab."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "fullWidth",
          "shortDescription": "Take full width of a parent"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "route",
              "type": "ActivatedRoute",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "changeDetectorRef",
              "type": "ChangeDetectorRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbTabsetComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterContentInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "selectedTab",
              "type": "NbTabComponent",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "selectTab",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbTabsetComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "tabs-font-family",
              "description": ""
            },
            {
              "name": "tabs-font-size",
              "description": ""
            },
            {
              "name": "tabs-content-font-family",
              "description": ""
            },
            {
              "name": "tabs-content-font-size",
              "description": ""
            },
            {
              "name": "tabs-active-bg",
              "description": ""
            },
            {
              "name": "tabs-active-font-weight",
              "description": ""
            },
            {
              "name": "tabs-padding",
              "description": ""
            },
            {
              "name": "tabs-content-padding",
              "description": ""
            },
            {
              "name": "tabs-header-bg",
              "description": ""
            },
            {
              "name": "tabs-separator",
              "description": ""
            },
            {
              "name": "tabs-fg",
              "description": ""
            },
            {
              "name": "tabs-fg-text",
              "description": ""
            },
            {
              "name": "tabs-fg-heading",
              "description": ""
            },
            {
              "name": "tabs-bg",
              "description": ""
            },
            {
              "name": "tabs-selected",
              "description": ""
            },
            {
              "name": "tabs-icon-only-max-width",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "tabset/tabset-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Tab With Badge",
            "id": "tabset/tabset-badge.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Full Width",
            "id": "tabset/tabset-width.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Icon",
            "id": "tabset/tabset-icon.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Dynamic tabset component."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "tabset/tabset-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Basic tabset example\n\n```html\n<nb-tabset>\n <nb-tab tabTitle=\"Simple Tab #1\">\n   Tab content 1\n </nb-tab>\n <nb-tab tabTitle=\"Simple Tab #2\">\n   Tab content 2\n </nb-tab>\n</nb-tabset>\n```\nIt is also possible to set a badge to a particular tab:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Tab With Badge",
            "id": "tabset/tabset-badge.component"
          }
        },
        {
          "type": "text",
          "content": "and we can set it to full a width of a parent component"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Full Width",
            "id": "tabset/tabset-width.component"
          }
        },
        {
          "type": "text",
          "content": "`tabIcon` should be used to add an icon to the tab. Icon can also be combined with title.\n`responsive` tab property if set allows you to hide the title on smaller screens\n(`tabs-icon-only-max-width` property) for better responsive behaviour. You can open the following example and make\nyour screen smaller - titles will be hidden in the last tabset in the list:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Icon",
            "id": "tabset/tabset-icon.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onClick",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbToastComponent",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "TODO\nRemove svg icons, include them in font."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "destroyByClick",
          "shortDescription": "Destroy by click means you can hide the toast by clicking it."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "duration",
          "shortDescription": "Duration is timeout between toast appears and disappears."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "hasIcon",
          "shortDescription": "Determines render icon or not."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "icon",
          "shortDescription": "Icon class that can be provided to render custom icon."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbGlobalPosition",
          "required": null,
          "name": "position",
          "shortDescription": "Determines where on the screen toast have to be rendered."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "preventDuplicates",
          "shortDescription": "If preventDuplicates is true then the next toast with the same title and message will not be rendered."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbToastStatus",
          "required": null,
          "name": "status",
          "shortDescription": "Status chooses color scheme for the toast."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "Partial",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbToastrConfig"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "Partial",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "patchIcon",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbToastrConfig",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "The `NbToastrConfig` class describes configuration of the `NbToastrService.show` and global toastr configuration."
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "globalConfig",
              "type": "NbToastrConfig",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "containerRegistry",
              "type": "NbToastrContainerRegistry",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbToastrService"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "message",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "title",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "config",
              "type": "Partial",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "danger",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Shows danger toast with message, title and user config."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "message",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "title",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "config",
              "type": "Partial",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "default",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Shows default toast with message, title and user config."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "message",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "title",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "config",
              "type": "Partial",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "info",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Shows info toast with message, title and user config."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "message",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "title",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "config",
              "type": "Partial",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "primary",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Shows primary toast with message, title and user config."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "message",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "title",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "userConfig",
              "type": "Partial",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "show",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Shows toast with message, title and user config."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "message",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "title",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "config",
              "type": "Partial",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "success",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Shows success toast with message, title and user config."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "message",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "title",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "config",
              "type": "Partial",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "warning",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Shows warning toast with message, title and user config."
        }
      ],
      "name": "NbToastrService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "toastr/toastr-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Position",
            "id": "toastr/toastr-positions.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Status",
            "id": "toastr/toastr-statuses.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Duration",
            "id": "toastr/toastr-duration.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Destroy by click",
            "id": "toastr/toastr-destroy-by-click.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Prevent duplicates",
            "id": "toastr/toastr-prevent-duplicates.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Has icon",
            "id": "toastr/toastr-icon.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "The `NbToastrService` provides a capability to build toast notifications."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "toastr/toastr-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "`NbToastrService.show(message, title, config)` accepts three params, title and config are optional.\n\nGlobal toastr configuration may be provided through `NbToastrModule.forRoot(config)`.\n\n```ts\nimports: [\n  NbToastrModule.forRoot(config),\n]\n```\n\n### Configuration\n\nConfig accepts following options:\n\n`position` - determines where on the screen toast will be rendered.\nDefault is `top-end`."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Position",
            "id": "toastr/toastr-positions.component"
          }
        },
        {
          "type": "text",
          "content": "`status` - coloring and icon of the toast.\nDefault is `primary`"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Status",
            "id": "toastr/toastr-statuses.component"
          }
        },
        {
          "type": "text",
          "content": "`duration` - the time after which the toast will be destroyed.\n`0` means endless toast, that may be destroyed by click only.\nDefault is 3000 ms."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Duration",
            "id": "toastr/toastr-duration.component"
          }
        },
        {
          "type": "text",
          "content": "`destroyByClick` - provides a capability to destroy toast by click.\nDefault is true."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Destroy by click",
            "id": "toastr/toastr-destroy-by-click.component"
          }
        },
        {
          "type": "text",
          "content": "`preventDuplicates` - don't create new toast if it has the same title and the same message with previous one.\nDefault is false."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Prevent duplicates",
            "id": "toastr/toastr-prevent-duplicates.component"
          }
        },
        {
          "type": "text",
          "content": "`hasIcon` - if true then render toast icon.\n`icon` - you can pass icon class that will be applied into the toast."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Has icon",
            "id": "toastr/toastr-icon.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbPosition",
          "required": null,
          "name": "position",
          "shortDescription": "Popover position relatively host element."
        }
      ],
      "methods": [],
      "name": "NbTooltipComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "tooltip-bg",
              "description": ""
            },
            {
              "name": "tooltip-primary-bg",
              "description": ""
            },
            {
              "name": "tooltip-info-bg",
              "description": ""
            },
            {
              "name": "tooltip-success-bg",
              "description": ""
            },
            {
              "name": "tooltip-warning-bg",
              "description": ""
            },
            {
              "name": "tooltip-danger-bg",
              "description": ""
            },
            {
              "name": "tooltip-fg",
              "description": ""
            },
            {
              "name": "tooltip-shadow",
              "description": ""
            },
            {
              "name": "tooltip-font-size",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Tooltip container.\nRenders provided tooltip inside."
        }
      ]
    },
    {
      "kind": "directive",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbAdjustment",
          "required": null,
          "name": "nbTooltipAdjustment",
          "shortDescription": "Container position will be changes automatically based on this strategy if container can't fit view port.\nSet this property to any falsy value if you want to disable automatically adjustment.\nAvailable values: clockwise, counterclockwise."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "nbTooltip",
          "shortDescription": "Popover content which will be rendered in NbTooltipComponent.\nAvailable content: template ref, component and any primitive."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "NbPosition",
          "required": null,
          "name": "nbTooltipPlacement",
          "shortDescription": "Position will be calculated relatively host element based on the position.\nCan be top, right, bottom, left, start or end."
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "nbTooltipIcon"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "nbTooltipStatus"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "hostRef",
              "type": "ElementRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "positionBuilder",
              "type": "NbPositionBuilderService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlay",
              "type": "NbOverlayService",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbTooltipDirective"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createPositionStrategy",
          "type": [
            "NbAdjustableConnectedPositionStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createTriggerStrategy",
          "type": [
            "NbTriggerStrategy"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "hide",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngAfterViewInit",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "ngOnDestroy",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "show",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnPositionChange",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "subscribeOnTriggers",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "toggle",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbTooltipDirective",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "tooltip/tooltip-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "With Icon",
            "id": "tooltip/tooltip-with-icon.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Placements",
            "id": "tooltip/tooltip-placements.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Tooltips",
            "id": "tooltip/tooltip-colors.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Tooltip directive for small text/icon hints."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "tooltip/tooltip-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "Tooltip can accept a hint text and/or an icon:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "With Icon",
            "id": "tooltip/tooltip-with-icon.component"
          }
        },
        {
          "type": "text",
          "content": "Same way as Popover, tooltip can accept placement position with `nbTooltipPlacement` proprety:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Placements",
            "id": "tooltip/tooltip-placements.component"
          }
        },
        {
          "type": "text",
          "content": "It is also possible to specify tooltip color using `nbTooltipStatus` property:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Colored Tooltips",
            "id": "tooltip/tooltip-colors.component"
          }
        }
      ]
    },
    {
      "kind": "component",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "badgePosition",
          "shortDescription": "Badge position.\nCan be set to any class or to one of predefined positions:\n'top left', 'top right', 'bottom left', 'bottom right',\n'top start', 'top end', 'bottom start', 'bottom end'"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "badgeStatus",
          "shortDescription": "Badge status (adds specific styles):\n'primary', 'info', 'success', 'warning', 'danger'"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "badgeText",
          "shortDescription": "Badge text to display"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "color",
          "shortDescription": "Color of the area shown when no picture specified"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "name",
          "shortDescription": "Specifies a name to be shown on the right of a user picture"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "title",
          "shortDescription": "Specifies a title (written in a smaller font) to be shown under the **name**"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "inverse",
          "shortDescription": "Makes colors inverse based on current theme"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "onlyPicture",
          "shortDescription": "Whether to show only a picture or also show the name and title"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "picture",
          "shortDescription": "Absolute path to a user picture. Or base64 image\nUser name initials (JD for John Doe) will be shown if no picture specified"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "showInitials",
          "shortDescription": "Whether to show a user initials (if no picture specified) or not"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "showName",
          "shortDescription": "Whether to show a user name or not"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "showTitle",
          "shortDescription": "Whether to show a user title or not"
        },
        {
          "kind": "input",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "size",
          "shortDescription": "Size of the component, small|medium|large"
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "domSanitizer",
              "type": "DomSanitizer",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbUserComponent"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getInitials",
          "type": [
            "string"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbUserComponent",
      "description": "",
      "shortDescription": "",
      "styles": [
        {
          "shortDescription": "",
          "styles": [
            {
              "name": "user-font-size",
              "description": ""
            },
            {
              "name": "user-line-height",
              "description": ""
            },
            {
              "name": "user-bg",
              "description": ""
            },
            {
              "name": "user-fg",
              "description": ""
            },
            {
              "name": "user-fg-highlight",
              "description": ""
            },
            {
              "name": "user-font-family-secondary",
              "description": ""
            },
            {
              "name": "user-size-small",
              "description": ""
            },
            {
              "name": "user-size-medium",
              "description": ""
            },
            {
              "name": "user-size-large",
              "description": ""
            },
            {
              "name": "user-size-xlarge",
              "description": ""
            }
          ]
        }
      ],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "user/user-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Multiple Sizes",
            "id": "user/user-sizes.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "Represents a component showing a user avatar (picture) with a user name on the right."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "user/user-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "```ts\n  <nb-user name=\"Jonh Doe\" title=\"Engineer\"></nb-user>\n```\nCan be used as a user profile link.\n\nAvailable in multiple sizes:"
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Multiple Sizes",
            "id": "user/user-sizes.component"
          }
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Observable",
          "required": null,
          "name": "onClose",
          "shortDescription": "Emits when window was closed."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbWindowState",
          "required": null,
          "name": "state",
          "shortDescription": "Current window state."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Observable",
          "required": null,
          "name": "stateChange",
          "shortDescription": "Emits when window state change."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "NbWindowConfig",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbWindowRef"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "close",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Closes window."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "fullScreen",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Set window on top."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "maximize",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Maximize window."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "minimize",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Minimize window."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "toPreviousState",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbWindowRef",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "The `NbWindowRef` helps to manipulate window after it was created.\nThe window can be dismissed by using `close` method of the windowRef.\nYou can access rendered component as `componentRef` property of the windowRef."
        }
      ]
    },
    {
      "kind": "class",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "closeOnBackdropClick",
          "shortDescription": "If set to true mouse clicks on backdrop will close a window.\nDefault is true."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "closeOnEsc",
          "shortDescription": "If true then escape press will close a window.\nDefault is true."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "Object",
          "required": null,
          "name": "context",
          "shortDescription": "Both, template and component may receive data through `config.context` property.\nFor components, this data will be set as component properties.\nFor templates, you can access it inside template as $implicit."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "boolean",
          "required": null,
          "name": "hasBackdrop",
          "shortDescription": "If true than backdrop will be rendered behind window.\nBy default set to true."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "NbWindowState",
          "required": null,
          "name": "initialState",
          "shortDescription": "Initial window state. Full screen by default."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "title",
          "shortDescription": "Window title."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "ViewContainerRef",
          "required": null,
          "name": "viewContainerRef",
          "shortDescription": "Where the attached component should live in Angular's *logical* component tree.\nThis affects what is available for injection and the change detection order for the\ncomponent instantiated inside of the window. This does not affect where the window\ncontent will be rendered."
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "string",
          "required": null,
          "name": "windowClass",
          "shortDescription": "Class to be applied to the window."
        }
      ],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "configs",
              "type": "Partial[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbWindowConfig"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbWindowConfig",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Window configuration options."
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "componentFactoryResolver",
              "type": "ComponentFactoryResolver",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlayService",
              "type": "NbOverlayService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "overlayPositionBuilder",
              "type": "NbOverlayPositionBuilder",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "blockScrollStrategy",
              "type": "NbBlockScrollStrategyAdapter",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "defaultWindowsConfig",
              "type": "NbWindowConfig",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbWindowService"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "content",
              "type": "",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "config",
              "type": "NbWindowConfig",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "windowRef",
              "type": "NbWindowRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "appendWindow",
          "type": [
            "ComponentRef<NbWindowComponent>"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "checkAndUpdateOverlay",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "createWindowsContainer",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "windowContent",
              "type": "",
              "required": null
            },
            {
              "name": "windowConfig",
              "type": "\n",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "open",
          "type": [
            "NbWindowRef"
          ],
          "isStatic": false,
          "shortDescription": "Opens new window."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "windowRef",
              "type": "NbWindowRef",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "subscribeToEvents",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbWindowService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "window/window-showcase.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Window content from TemplateRef",
            "id": "window/template-window.component"
          }
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Configuration",
            "id": "window/windows-backdrop.component"
          }
        }
      ],
      "overview": [
        {
          "type": "text",
          "content": "The `NbWindowService` can be used to open windows."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Showcase",
            "id": "window/window-showcase.component"
          }
        },
        {
          "type": "text",
          "content": "A new window can be opened by calling the `open` method with a component or template to be loaded\nand an optional configuration.\n`open` method will return `NbWindowRef` that can be used for the further manipulations.\n\n```ts\nconst windowRef = this.windowService.open(MyComponent, { ... });\n```\n\n`NbWindowRef` gives you ability manipulate opened window.\nAlso, you can inject `NbWindowRef` inside provided component which rendered in window.\n\n```ts\nthis.windowService.open(MyWindowComponent, { ... });\n\n// my.component.ts\nconstructor(protected windowRef: NbWindowRef) {\n}\n\nminimize() {\n  this.windowRef.minimize();\n}\n\nclose() {\n  this.windowRef.close();\n}\n```\n\nInstead of component you can create window from TemplateRef. As usual you can access context provided via config\nvia `let-` variables. Also you can get reference to the `NbWindowRef` in context's `windowRef` property."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Window content from TemplateRef",
            "id": "window/template-window.component"
          }
        },
        {
          "type": "text",
          "content": "### Configuration\n\nAs mentioned above, `open` method of the `NbWindowService` may receive optional configuration options.\nAlso, you can modify default windows configuration through `NbWindowModule.forRoot({ ... })`.\nYou can read about all available options on [API tab](docs/components/window/api#nbwindowconfig)."
        },
        {
          "type": "stacked-example",
          "content": {
            "name": "Configuration",
            "id": "window/windows-backdrop.component"
          }
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "breakpoints",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbMediaBreakpointsService"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getBreakpoints",
          "type": [
            "NbMediaBreakpoint[]"
          ],
          "isStatic": false,
          "shortDescription": "Returns a list of configured breakpoints for the theme"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getBreakpointsMap",
          "type": [
            "{[breakpoint: string]: number}"
          ],
          "isStatic": false,
          "shortDescription": "Returns a map of configured breakpoints for the theme"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "name",
              "type": "string",
              "required": null,
              "description": "string"
            }
          ],
          "platform": null,
          "name": "getByName",
          "type": [
            "NbMediaBreakpoint\n"
          ],
          "isStatic": false,
          "shortDescription": "Returns a configured breakpoint by name"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "width",
              "type": "number",
              "required": null,
              "description": "number"
            }
          ],
          "platform": null,
          "name": "getByWidth",
          "type": [
            "NbMediaBreakpoint"
          ],
          "isStatic": false,
          "shortDescription": "Returns a configured breakpoint by width"
        }
      ],
      "name": "NbMediaBreakpointsService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Manages media breakpoints"
        },
        {
          "type": "text",
          "content": "Provides access to available media breakpoints to convert window width to a configured breakpoint,\ne.g. 200px - *xs* breakpoint\n"
        }
      ]
    },
    {
      "kind": "interface",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [],
      "name": "NbMediaBreakpoint",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Media breakpoint type"
        },
        {
          "type": "text",
          "content": "Where `name` - breakpoint name alias (e.g. xs, sm, md, etc), and width - min breakpoint width\n"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "direction",
              "type": "NbLayoutDirection",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbLayoutDirectionService"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getDirection",
          "type": [
            "NbLayoutDirection.\n"
          ],
          "isStatic": false,
          "shortDescription": "Returns current layout direction."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "isLtr",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Returns true if layout direction set to left to right."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "isRtl",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Returns true if layout direction set to right to left."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onDirectionChange",
          "type": [
            "Observable<NbLayoutDirection>.\n"
          ],
          "isStatic": false,
          "shortDescription": "Triggered when direction was changed."
        },
        {
          "examples": [],
          "params": [
            {
              "name": "direction",
              "type": "\n",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "setDirection",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Sets layout direction"
        }
      ],
      "name": "NbLayoutDirectionService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Layout Direction Service.\nAllows to set or get layout direction and listen to its changes"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "builtInThemes",
              "type": "NbJSThemeOptions[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "newThemes",
              "type": "NbJSThemeOptions[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbJSThemesRegistry"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "newThemes",
              "type": "NbJSThemeOptions[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "oldThemes",
              "type": "NbJSThemeOptions[]",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "combineByNames",
          "type": [
            "NbJSThemeOptions[]"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "themeName",
              "type": "string",
              "required": null
            }
          ],
          "platform": null,
          "name": "get",
          "type": [
            "NbJSThemeOptions\n"
          ],
          "isStatic": false,
          "shortDescription": "Return a theme"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "themeName",
              "type": "string",
              "required": null
            }
          ],
          "platform": null,
          "name": "has",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "Checks whether the theme is registered"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "item",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "isObject",
          "type": [
            "boolean"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "target",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "sources",
              "type": "Object",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "mergeDeep",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "config",
              "type": "any",
              "required": null,
              "description": "any"
            },
            {
              "name": "themeName",
              "type": "string",
              "required": null,
              "description": "string"
            },
            {
              "name": "baseTheme",
              "type": "string",
              "required": null,
              "description": "string\n"
            }
          ],
          "platform": null,
          "name": "register",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Registers a new JS theme"
        }
      ],
      "name": "NbJSThemesRegistry",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Js Themes registry - provides access to the JS themes' variables.\nUsually shouldn't be used directly, but through the NbThemeService class methods (getJsTheme)."
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getDimensions",
          "type": [
            "Observable<NbLayoutDimensions>"
          ],
          "isStatic": false,
          "shortDescription": "Content dimensions"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onGetDimensions",
          "type": [
            "Subject<any>"
          ],
          "isStatic": false
        }
      ],
      "name": "NbLayoutRulerService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Simple helper service to return Layout dimensions\nDepending of current Layout scroll mode (default or `withScroll` when scroll is moved to an element\ninside of the layout) corresponding dimensions will be returns  - of `documentElement` in first case and\n`.scrollable-container` in the second."
        }
      ]
    },
    {
      "kind": "interface",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "clientHeight",
          "shortDescription": "clientHeight"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "clientWidth",
          "shortDescription": "clientWidth"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "scrollHeight",
          "shortDescription": "scrollHeight"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "scrollWidth",
          "shortDescription": "scrollWidth"
        }
      ],
      "methods": [],
      "name": "NbLayoutDimensions",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Layout dimensions type"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "event",
              "type": "any",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "fireScrollChange",
          "type": [
            "void"
          ],
          "isStatic": false
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getPosition",
          "type": [
            "Observable<NbScrollPosition>"
          ],
          "isStatic": false,
          "shortDescription": "Returns scroll position"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onGetPosition",
          "type": [
            "Subject<any>"
          ],
          "isStatic": false
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onManualScroll",
          "type": [
            "Observable<NbScrollPosition>.\n"
          ],
          "isStatic": false
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onScroll",
          "type": [
            "Observable<any>"
          ],
          "isStatic": false,
          "shortDescription": "Returns a stream of scroll events"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "x",
              "type": "number",
              "required": null
            },
            {
              "name": "y",
              "type": "number",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "scrollTo",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Sets scroll position"
        }
      ],
      "name": "NbLayoutScrollService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Layout scroll service. Provides information about current scroll position,\nas well as methods to update position of the scroll."
        },
        {
          "type": "text",
          "content": "The reason we added this service is that in Nebular there are two scroll modes:\n- the default mode when scroll is on body\n- and the `withScroll` mode, when scroll is removed from the body and moved to an element inside of the\n`nb-layout` component\n"
        }
      ]
    },
    {
      "kind": "interface",
      "platform": null,
      "examples": [],
      "props": [
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "x",
          "shortDescription": "x - left"
        },
        {
          "kind": "property",
          "platform": null,
          "isStatic": false,
          "type": "number",
          "required": null,
          "name": "y",
          "shortDescription": "y - top"
        }
      ],
      "methods": [],
      "name": "NbScrollPosition",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Scroll position type"
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "document",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbSpinnerService"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "clear",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Clears the list of loader"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "done",
              "type": "(Anonymous function)",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "executeAll",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getSpinnerElement",
          "type": [
            "any"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "hideSpinner",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "load",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Start the loader process, show spinnder and execute loaders"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "method",
              "type": "Promise<any>\n",
              "required": null,
              "description": "Promise<any>\n"
            }
          ],
          "platform": null,
          "name": "registerLoader",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Appends new loader to the list of loader to be completed before\nspinner will be hidden"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "showSpinner",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        }
      ],
      "name": "NbSpinnerService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Service to control the global page spinner."
        }
      ]
    },
    {
      "kind": "service",
      "platform": null,
      "examples": [],
      "props": [],
      "methods": [
        {
          "examples": [],
          "params": [
            {
              "name": "options",
              "type": "any",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "breakpointService",
              "type": "NbMediaBreakpointsService",
              "required": null,
              "shortDescription": "",
              "description": ""
            },
            {
              "name": "jsThemesRegistry",
              "type": "NbJSThemesRegistry",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "constructor",
          "type": [
            "NbThemeService"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [
            {
              "name": "className",
              "type": "string",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "appendLayoutClass",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Append a class to nb-layout"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "name",
              "type": "string",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "changeTheme",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Change current application theme"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "width",
              "type": "number",
              "required": null,
              "shortDescription": "",
              "description": ""
            }
          ],
          "platform": null,
          "name": "changeWindowWidth",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "",
          "description": ""
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "getJsTheme",
          "type": [
            "Observable<NbJSThemeOptions>"
          ],
          "isStatic": false,
          "shortDescription": "Returns a theme object with variables (color/paddings/etc) on a theme change.\nOnce subscribed - returns current theme."
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onAppendLayoutClass",
          "type": [
            "Observable<any>"
          ],
          "isStatic": false,
          "shortDescription": "Triggered when a new class is added to nb-layout through `appendLayoutClass` method"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onMediaQueryChange",
          "type": [
            "Observable<NbMediaBreakpoint[]>"
          ],
          "isStatic": false,
          "shortDescription": "Triggers media query breakpoint change\nReturns a pair where the first item is previous media breakpoint and the second item is current breakpoit.\n```ts\n [{ name: 'xs', width: 0 }, { name: 'md', width: 768 }] // change from `xs` to `md`\n```"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onRemoveLayoutClass",
          "type": [
            "Observable<any>"
          ],
          "isStatic": false,
          "shortDescription": "Triggered when a class is removed from nb-layout through `removeLayoutClass` method"
        },
        {
          "examples": [],
          "params": [],
          "platform": null,
          "name": "onThemeChange",
          "type": [
            "Observable<any>"
          ],
          "isStatic": false,
          "shortDescription": "Triggered when current theme is changed"
        },
        {
          "examples": [],
          "params": [
            {
              "name": "className",
              "type": "string",
              "required": null,
              "description": "\n"
            }
          ],
          "platform": null,
          "name": "removeLayoutClass",
          "type": [
            "void"
          ],
          "isStatic": false,
          "shortDescription": "Removes a class from nb-layout"
        }
      ],
      "name": "NbThemeService",
      "description": "",
      "shortDescription": "",
      "styles": [],
      "liveExamples": [],
      "overview": [
        {
          "type": "text",
          "content": "Main Nebular service. Includes various helper methods."
        }
      ]
    }
  ]
}